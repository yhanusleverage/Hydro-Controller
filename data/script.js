let chart;
const maxDataPoints = 30;
let timeLabels = [];
let phData = [];
let ecData = [];
let tempData = [];

// ===== ESTADO GLOBAL DO SISTEMA =====
// Centraliza todos os dados para sincroniza√ß√£o em tempo real
const globalState = {
    // Par√¢metros do sistema
    system: {
        volume: 0,             // Volume do reservat√≥rio (L) - removido valor padr√£o
        flowRate: 0,           // Taxa de vaz√£o (ml/s) - removido valor padr√£o
        baseDose: 0,           // EC base (¬µS/cm) - removido valor padr√£o
        ecSetpoint: 0,         // Setpoint EC (¬µS/cm) - removido valor padr√£o
        totalMlPorLitro: 0     // Soma autom√°tica dos ml/L
    },
    
    // Plano nutricional
    nutrition: {
        'Grow': { mlPorLitro: 0, relay: 3 },      // removido valor padr√£o
        'Micro': { mlPorLitro: 0, relay: 4 },     // removido valor padr√£o
        'Bloom': { mlPorLitro: 0, relay: 5 },     // removido valor padr√£o  
        'CalMag': { mlPorLitro: 0, relay: 6 },    // removido valor padr√£o
        'pH-': { mlPorLitro: 0, relay: 1 },       // removido valor padr√£o
        'pH+': { mlPorLitro: 0, relay: 2 }        // removido valor padr√£o
    },
    
    // Controle autom√°tico
    control: {
        autoECEnabled: false,
        lastDosage: 0,
        currentECValue: 0,
        intervaloBetweenNutrients: 0,  // removido valor padr√£o
        intervaloAutoEC: 0             // removido valor padr√£o
    },
    
    // Callbacks para notifica√ß√£o de mudan√ßas
    listeners: []
};

// ===== SISTEMA DE MONITORAMENTO DE COMUNICA√á√ÉO =====
const communicationMonitor = {
    // Estat√≠sticas
    stats: {
        commandsSent: 0,
        commandsSuccess: 0,
        commandsFailed: 0,
        startTime: Date.now()
    },
    
    // Status da conex√£o
    connectionStatus: 'offline', // 'online', 'offline', 'connecting'
    lastCommunication: null,
    
    // Log de comunica√ß√£o
    logs: [],
    maxLogs: 100,
    
    // Configura√ß√µes
    config: {
        autoScroll: true,
        logFilter: 'all'
    },
    
    // Inicializar sistema de monitoramento
    init() {
        console.log('üöÄ Inicializando sistema de monitoramento...');
        this.setupEventListeners();
        this.updateUI();
        this.startConnectionMonitoring();
        this.addLog('info', 'Sistema de monitoramento iniciado');
    },
    
    // Configurar event listeners
    setupEventListeners() {
        // Bot√£o limpar logs
        const clearBtn = document.getElementById('clear-logs');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => this.clearLogs());
        }
        
        // Bot√£o minimizar dashboard
        const toggleBtn = document.getElementById('toggle-dashboard');
        if (toggleBtn) {
            toggleBtn.addEventListener('click', () => this.toggleDashboard());
        }
        
        // Bot√£o testar conex√£o
        const testBtn = document.getElementById('test-connection');
        if (testBtn) {
            testBtn.addEventListener('click', () => this.testConnection());
        }
        
        // Bot√£o resumo de dados
        const summaryBtn = document.getElementById('show-data-summary');
        if (summaryBtn) {
            summaryBtn.addEventListener('click', () => this.showDataSummary());
        }
        
        // Filtro de logs
        const logFilter = document.getElementById('log-filter');
        if (logFilter) {
            logFilter.addEventListener('change', (e) => {
                this.config.logFilter = e.target.value;
                this.updateLogDisplay();
            });
        }
        
        // Auto-scroll checkbox
        const autoScrollCheck = document.getElementById('auto-scroll');
        if (autoScrollCheck) {
            autoScrollCheck.addEventListener('change', (e) => {
                this.config.autoScroll = e.target.checked;
            });
        }
    },
    
    // Interceptar todas as comunica√ß√µes fetch
    interceptFetch() {
        const originalFetch = window.fetch;
        
        window.fetch = async (...args) => {
            const [url, options = {}] = args;
            const method = options.method || 'GET';
            const startTime = Date.now();
            
            // Log do envio
            this.logRequest(method, url, options.body);
            
            try {
                this.setConnectionStatus('connecting');
                const response = await originalFetch(...args);
                const duration = Date.now() - startTime;
                
                // Log da resposta
                this.logResponse(method, url, response.status, duration, response.ok);
                
                if (response.ok) {
                    this.setConnectionStatus('online');
                    this.stats.commandsSuccess++;
                } else {
                    this.stats.commandsFailed++;
                }
                
                this.stats.commandsSent++;
                this.updateStats();
                
                return response;
            } catch (error) {
                const duration = Date.now() - startTime;
                this.logError(method, url, error.message, duration);
                this.setConnectionStatus('offline');
                this.stats.commandsFailed++;
                this.stats.commandsSent++;
                this.updateStats();
                throw error;
            }
        };
    },
    
    // Log de requisi√ß√£o
    logRequest(method, url, body) {
        const urlPath = url.replace(window.location.origin, '');
        let message = `${method} ${urlPath}`;
        
        if (body && method !== 'GET') {
            try {
                const data = JSON.parse(body);
                const preview = this.formatDataPreview(data);
                message += ` ‚Üí ${preview}`;
                this.addLog('data', message);
                
                // Atualizar info do √∫ltimo envio
                this.updateLastSent(urlPath, preview, 'enviando...');
            } catch (e) {
                this.addLog('data', message);
            }
        } else {
            this.addLog('info', message);
        }
    },
    
    // Log de resposta
    logResponse(method, url, status, duration, success) {
        const urlPath = url.replace(window.location.origin, '');
        const statusText = success ? '‚úÖ' : '‚ùå';
        const message = `${statusText} ${method} ${urlPath} (${status}) - ${duration}ms`;
        
        this.addLog(success ? 'success' : 'error', message);
        this.updateLastSent(urlPath, null, success ? '‚úÖ Sucesso' : `‚ùå Erro ${status}`);
    },
    
    // Log de erro
    logError(method, url, error, duration) {
        const urlPath = url.replace(window.location.origin, '');
        const message = `‚ùå ${method} ${urlPath} - ERRO: ${error} (${duration}ms)`;
        this.addLog('error', message);
        this.updateLastSent(urlPath, null, `‚ùå ${error}`);
    },
    
    // Formatar preview dos dados
    formatDataPreview(data) {
        if (data.totalUt !== undefined) {
            return `Dosagem: ${data.totalUt.toFixed(2)}ml`;
        } else if (data.baseDose !== undefined) {
            return `Params EC: ${data.baseDose}¬µS/cm`;
        } else if (data.setpoint !== undefined) {
            return `Setpoint: ${data.setpoint}¬µS/cm`;
        } else if (data.relay !== undefined) {
            return `Rel√© ${data.relay}: ${data.state ? 'ON' : 'OFF'}`;
        }
        return 'Dados JSON';
    },
    
    // Adicionar log
    addLog(type, message) {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = {
            timestamp,
            type,
            message,
            id: Date.now() + Math.random()
        };
        
        this.logs.unshift(logEntry);
        
        // Limitar n√∫mero de logs
        if (this.logs.length > this.maxLogs) {
            this.logs = this.logs.slice(0, this.maxLogs);
        }
        
        this.updateLogDisplay();
        console.log(`üìã [${timestamp}] ${type.toUpperCase()}: ${message}`);
    },
    
    // Atualizar display do log
    updateLogDisplay() {
        const container = document.getElementById('communication-log');
        if (!container) return;
        
        // Filtrar logs
        let filteredLogs = this.logs;
        if (this.config.logFilter !== 'all') {
            filteredLogs = this.logs.filter(log => log.type === this.config.logFilter);
        }
        
        // Renderizar logs
        container.innerHTML = filteredLogs.map(log => 
            `<div class="log-entry ${log.type}">
                <span class="timestamp">${log.timestamp}</span>
                <span class="type">${this.getTypeIcon(log.type)} ${log.type.toUpperCase()}</span>
                <span class="message">${log.message}</span>
            </div>`
        ).join('');
        
        // Auto-scroll se habilitado
        if (this.config.autoScroll) {
            container.scrollTop = 0; // Scroll para o topo (logs mais recentes)
        }
    },
    
    // √çcone do tipo de log
    getTypeIcon(type) {
        const icons = {
            success: '‚úÖ',
            error: '‚ùå',
            info: '‚ÑπÔ∏è',
            data: 'üìä'
        };
        return icons[type] || '‚ÑπÔ∏è';
    },
    
    // Atualizar status da conex√£o
    setConnectionStatus(status) {
        if (this.connectionStatus !== status) {
            this.connectionStatus = status;
            this.lastCommunication = new Date();
            this.updateConnectionUI();
            
            const statusMessages = {
                online: 'Conectado ao ESP32',
                offline: 'Desconectado do ESP32',
                connecting: 'Conectando ao ESP32...'
            };
            
            this.addLog('info', statusMessages[status] || `Status: ${status}`);
        }
    },
    
    // Atualizar UI da conex√£o
    updateConnectionUI() {
        const statusElement = document.getElementById('esp32-status');
        const lastCommElement = document.getElementById('last-communication');
        
        if (statusElement) {
            statusElement.className = `status-indicator ${this.connectionStatus}`;
            
            const statusTexts = {
                online: 'üü¢ Conectado',
                offline: 'üî¥ Desconectado',
                connecting: 'üü° Conectando...'
            };
            
            statusElement.textContent = statusTexts[this.connectionStatus] || this.connectionStatus;
        }
        
        if (lastCommElement && this.lastCommunication) {
            const timeAgo = this.getTimeAgo(this.lastCommunication);
            lastCommElement.textContent = `√öltima comunica√ß√£o: ${timeAgo}`;
        }
    },
    
    // Calcular tempo decorrido
    getTimeAgo(date) {
        const seconds = Math.floor((Date.now() - date.getTime()) / 1000);
        
        if (seconds < 60) return `${seconds}s atr√°s`;
        if (seconds < 3600) return `${Math.floor(seconds / 60)}m atr√°s`;
        return `${Math.floor(seconds / 3600)}h atr√°s`;
    },
    
    // Atualizar informa√ß√µes do √∫ltimo envio
    updateLastSent(type, data, status) {
        const typeElement = document.getElementById('last-sent-type');
        const dataElement = document.getElementById('last-sent-data');
        const statusElement = document.getElementById('last-sent-status');
        
        if (typeElement) typeElement.textContent = type;
        if (dataElement && data) dataElement.textContent = data;
        if (statusElement) statusElement.textContent = status;
    },
    
    // Atualizar estat√≠sticas
    updateStats() {
        const sentElement = document.getElementById('commands-sent');
        const successElement = document.getElementById('commands-success');
        const failedElement = document.getElementById('commands-failed');
        
        if (sentElement) sentElement.textContent = this.stats.commandsSent;
        if (successElement) successElement.textContent = this.stats.commandsSuccess;
        if (failedElement) failedElement.textContent = this.stats.commandsFailed;
    },
    
    // Atualizar informa√ß√µes do controle EC
    updateECInfo(utValue, nextDosage, activeRelays) {
        const utElement = document.getElementById('current-ut');
        const nextElement = document.getElementById('next-dosage');
        const relaysElement = document.getElementById('active-relays');
        
        if (utElement) utElement.textContent = `${utValue.toFixed(2)} ml`;
        if (nextElement) nextElement.textContent = nextDosage || '--';
        if (relaysElement) relaysElement.textContent = activeRelays || '--';
    },
    
    // Limpar logs
    clearLogs() {
        this.logs = [];
        this.updateLogDisplay();
        this.addLog('info', 'Logs limpos pelo usu√°rio');
    },
    
    // Toggle dashboard (minimizar/expandir)
    toggleDashboard() {
        const dashboard = document.getElementById('comm-dashboard');
        const toggleBtn = document.getElementById('toggle-dashboard');
        
        if (dashboard && toggleBtn) {
            dashboard.classList.toggle('minimized');
            const isMinimized = dashboard.classList.contains('minimized');
            toggleBtn.textContent = isMinimized ? 'üìà Expandir' : 'üìä Minimizar';
        }
    },
    
    // Testar conex√£o
    async testConnection() {
        this.addLog('info', 'Testando conex√£o com ESP32...');
        
        try {
            const response = await fetch('/sensors');
            if (response.ok) {
                const data = await response.json();
                this.addLog('success', `Conex√£o OK - EC: ${data.ec}¬µS/cm, pH: ${data.ph.toFixed(2)}`);
                this.setConnectionStatus('online');
            } else {
                this.addLog('error', `Teste falhou - Status: ${response.status}`);
                this.setConnectionStatus('offline');
            }
        } catch (error) {
            this.addLog('error', `Teste falhou - ${error.message}`);
            this.setConnectionStatus('offline');
        }
    },
    
    // Monitoramento cont√≠nuo da conex√£o
    startConnectionMonitoring() {
        setInterval(() => {
            this.updateConnectionUI();
            
            // Auto-test se estiver offline por muito tempo
            if (this.connectionStatus === 'offline' && 
                this.lastCommunication && 
                (Date.now() - this.lastCommunication.getTime()) > 30000) { // 30 segundos
                this.testConnection();
            }
        }, 5000);
    },
    
    // Atualizar UI geral
    updateUI() {
        this.updateConnectionUI();
        this.updateStats();
        this.updateLogDisplay();
    },
    
    // Mostrar resumo dos dados sendo enviados
    showDataSummary() {
        const { system, nutrition, control } = globalState;
        const uptime = Math.floor((Date.now() - this.stats.startTime) / 1000);
        const uptimeText = this.formatUptime(uptime);
        
        // Calcular distribui√ß√£o atual
        const distribution = calculateProportionalDistribution(1); // Usar 1ml como base
        
        let summary = `üìä RESUMO DO SISTEMA - DADOS ENVIADOS AO ESP32
        
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üì° STATUS DE COMUNICA√á√ÉO                     ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë Status ESP32: ${this.connectionStatus.toUpperCase()}                                      ‚ïë
‚ïë √öltima comunica√ß√£o: ${this.lastCommunication ? this.getTimeAgo(this.lastCommunication) : 'Nunca'}                        ‚ïë
‚ïë Tempo ativo: ${uptimeText}                                      ‚ïë
‚ïë Comandos enviados: ${this.stats.commandsSent}                                        ‚ïë
‚ïë Sucessos: ${this.stats.commandsSuccess} | Falhas: ${this.stats.commandsFailed}                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                   üîß PAR√ÇMETROS DO SISTEMA                     ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë üìä Base Dose: ${system.baseDose} ¬µS/cm                                    ‚ïë
‚ïë üíß Flow Rate: ${system.flowRate} ml/s                                     ‚ïë
‚ïë ü™£ Volume: ${system.volume} L                                           ‚ïë
‚ïë üéØ EC Setpoint: ${system.ecSetpoint} ¬µS/cm                                ‚ïë
‚ïë üß™ Total ml/L: ${system.totalMlPorLitro.toFixed(1)} ml/L                             ‚ïë
‚ïë ‚ö° Fator k: ${system.totalMlPorLitro > 0 ? (system.baseDose / system.totalMlPorLitro).toFixed(3) : '0.000'}                                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üß™ PLANO NUTRICIONAL                        ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£`;

        Object.keys(nutrition).forEach(nutrient => {
            const data = nutrition[nutrient];
            const quantidade = (data.mlPorLitro * system.volume).toFixed(1);
            summary += `\n‚ïë ${nutrient.padEnd(8)}: ${data.mlPorLitro.toString().padStart(4)}ml/L ‚Üí ${quantidade.padStart(6)}ml (Rel√© ${data.relay})  ‚ïë`;
        });

        summary += `
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                 üéõÔ∏è CONTROLE AUTOM√ÅTICO                         ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë Auto EC: ${control.autoECEnabled ? 'ATIVO' : 'DESATIVADO'}                                      ‚ïë
‚ïë EC Atual: ${control.currentECValue.toFixed(1)} ¬µS/cm                                   ‚ïë
‚ïë Erro atual: ${control.currentECValue > 0 ? (system.ecSetpoint - control.currentECValue).toFixed(1) : '--'} ¬µS/cm                                ‚ïë
‚ïë Intervalo dosagem: ${control.intervaloBetweenNutrients}s                                     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`;

        if (distribution.length > 0) {
            summary += `

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                üìä DISTRIBUI√á√ÉO PROPORCIONAL                   ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£`;
            
            distribution.forEach(item => {
                const percent = (item.proporcao * 100).toFixed(1);
                summary += `\n‚ïë ${item.nutriente.padEnd(8)}: ${percent.padStart(5)}% ‚Üí Rel√© ${item.relay}                        ‚ïë`;
            });
            
            summary += `
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`;
        }

        summary += `

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üîÑ PR√ìXIMAS A√á√ïES                          ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£`;

        // Calcular u(t) atual se poss√≠vel
        if (window.lastControllerResult) {
            const result = window.lastControllerResult;
            summary += `
‚ïë u(t) calculado: ${result.result.toFixed(2)} ml                                ‚ïë
‚ïë Tempo dosagem: ${result.dosageTime.toFixed(1)}s                                   ‚ïë`;
            
            if (result.result > 0.1) {
                summary += `
‚ïë Status: DOSAGEM NECESS√ÅRIA                                     ‚ïë`;
            } else {
                summary += `
‚ïë Status: SEM DOSAGEM NECESS√ÅRIA                                 ‚ïë`;
            }
        } else {
            summary += `
‚ïë Status: AGUARDANDO C√ÅLCULO DO CONTROLLER                       ‚ïë`;
        }

        summary += `
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìù √öLTIMOS LOGS:`;

        // Adicionar √∫ltimos 5 logs
        const recentLogs = this.logs.slice(0, 5);
        recentLogs.forEach(log => {
            const icon = this.getTypeIcon(log.type);
            summary += `\n${icon} [${log.timestamp}] ${log.message}`;
        });

        summary += `

‚úÖ TODOS OS DADOS ACIMA S√ÉO ENVIADOS EM TEMPO REAL PARA O ESP32!
üì° Use o monitor serial do Arduino IDE para ver os logs do ESP32.`;

        alert(summary);
        this.addLog('info', 'Resumo de dados exibido para o usu√°rio');
    },
    
    // Formatar tempo de atividade
    formatUptime(seconds) {
        const days = Math.floor(seconds / 86400);
        const hours = Math.floor((seconds % 86400) / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        
        if (days > 0) return `${days}d ${hours}h ${minutes}m`;
        if (hours > 0) return `${hours}h ${minutes}m ${secs}s`;
        if (minutes > 0) return `${minutes}m ${secs}s`;
        return `${secs}s`;
    }
};

// Fun√ß√£o para adicionar listeners de mudan√ßa de estado
function addStateListener(callback) {
    globalState.listeners.push(callback);
}

// Fun√ß√£o para notificar mudan√ßas de estado
function notifyStateChange(section, field, oldValue, newValue) {
    console.log(`üîÑ Estado alterado: ${section}.${field} = ${oldValue} ‚Üí ${newValue}`);
    globalState.listeners.forEach(callback => {
        try {
            callback(section, field, oldValue, newValue);
        } catch (error) {
            console.error('‚ùå Erro no listener de estado:', error);
        }
    });
}

// Fun√ß√£o para atualizar estado de forma segura
function updateState(section, field, value) {
    const oldValue = globalState[section][field];
    if (oldValue !== value) {
        globalState[section][field] = value;
        notifyStateChange(section, field, oldValue, value);
        syncAllFields();
    }
}

// Fun√ß√£o para sincronizar todos os campos da interface
function syncAllFields() {
    console.log('üîÑ Sincronizando todos os campos da interface...');
    
    // Sincronizar campos da se√ß√£o EC
    syncFieldValue('volume-reservoir', globalState.system.volume);
    syncFieldValue('flow-rate', globalState.system.flowRate);
    syncFieldValue('base-dose', globalState.system.baseDose);
    syncFieldValue('ec-setpoint', globalState.system.ecSetpoint);
    syncFieldValue('intervalo-dosagem', globalState.control.intervaloBetweenNutrients);
    syncFieldValue('intervalo-auto-ec', globalState.control.intervaloAutoEC);
    
    // Sincronizar tabela nutricional
    Object.keys(globalState.nutrition).forEach(nutrient => {
        const row = document.querySelector(`tr[data-nutrient="${nutrient}"]`);
        if (row) {
            const input = row.querySelector('.ml-por-litro');
            if (input) {
                syncFieldValue(input, globalState.nutrition[nutrient].mlPorLitro);
            }
        }
    });
    
    // Recalcular tudo
    calculateNutritionPlan();
    updateEquationDisplay();
}

// Fun√ß√£o auxiliar para sincronizar valor de campo
function syncFieldValue(fieldOrId, value) {
    let element;
    if (typeof fieldOrId === 'string') {
        element = document.getElementById(fieldOrId);
    } else {
        element = fieldOrId;
    }
    
    if (element && element.value != value) {
        element.value = value;
        console.log(`üìù Campo sincronizado: ${element.id || element.className} = ${value}`);
    }
}

// Fun√ß√£o centralizada para calcular plano nutricional
function calculateNutritionPlan() {
    console.log('üßÆ Calculando plano nutricional com estado global...');
    
    const { volume, flowRate } = globalState.system;
    const { intervaloBetweenNutrients } = globalState.control;
    
    if (volume <= 0 || flowRate <= 0) {
        console.error('‚ùå Par√¢metros inv√°lidos:', { volume, flowRate });
        return;
    }
    
    let tempoTotal = 0;
    let mlPorLitroTotal = 0;
    
    // Calcular para cada nutriente
    Object.keys(globalState.nutrition).forEach(nutrient => {
        const nutritionData = globalState.nutrition[nutrient];
        const { mlPorLitro } = nutritionData;
        
        // Calcular quantidade e tempo
        const quantidade = mlPorLitro * volume;
        const tempo = quantidade / flowRate;
        
        // Atualizar na interface
        const row = document.querySelector(`tr[data-nutrient="${nutrient}"]`);
        if (row) {
            const quantidadeCell = row.querySelector('.quantidade');
            const tempoCell = row.querySelector('.tempo');
            
            if (quantidadeCell) quantidadeCell.textContent = quantidade.toFixed(1);
            if (tempoCell) tempoCell.textContent = tempo.toFixed(1);
        }
        
        // Somar totais
        tempoTotal += tempo;
        mlPorLitroTotal += mlPorLitro;
        
        console.log(`üß™ ${nutrient}: ${mlPorLitro}ml/L ‚Üí ${quantidade.toFixed(1)}ml ‚Üí ${tempo.toFixed(1)}s`);
    });
    
    // Adicionar intervalos
    const numNutrientes = Object.keys(globalState.nutrition).length;
    if (numNutrientes > 1) {
        tempoTotal += intervaloBetweenNutrients * (numNutrientes - 1);
    }
    
    // Atualizar estado global
    updateState('system', 'totalMlPorLitro', mlPorLitroTotal);
    
    // Atualizar interface
    const tempoTotalElement = document.getElementById('tempo-total');
    if (tempoTotalElement) {
        tempoTotalElement.textContent = `${tempoTotal.toFixed(1)} segundos`;
    }
    
    const totalMlElement = document.getElementById('total-ml');
    if (totalMlElement) {
        totalMlElement.value = mlPorLitroTotal.toFixed(1);
        // Disparar evento para outros listeners
        totalMlElement.dispatchEvent(new Event('input', { bubbles: true }));
    }
    
    console.log(`üìä TOTAIS: ${mlPorLitroTotal.toFixed(1)}ml/L, ${tempoTotal.toFixed(1)}s`);
}

// Fun√ß√£o para inicializar estado global
function initializeGlobalState() {
    console.log('üöÄ Inicializando estado global...');
    
    // Carregar valores dos campos existentes
    const volumeField = document.getElementById('volume-reservoir');
    const flowRateField = document.getElementById('flow-rate');
    const baseDoseField = document.getElementById('base-dose');
    const setpointField = document.getElementById('ec-setpoint');
    const intervalField = document.getElementById('intervalo-dosagem');
    const intervaloAutoField = document.getElementById('intervalo-auto-ec');
    
    if (volumeField && volumeField.value) {
        globalState.system.volume = parseFloat(volumeField.value);
    }
    if (flowRateField && flowRateField.value) {
        globalState.system.flowRate = parseFloat(flowRateField.value);
    }
    if (baseDoseField && baseDoseField.value) {
        globalState.system.baseDose = parseFloat(baseDoseField.value);
    }
    if (setpointField && setpointField.value) {
        globalState.system.ecSetpoint = parseFloat(setpointField.value);
    }
    if (intervalField && intervalField.value) {
        globalState.control.intervaloBetweenNutrients = parseInt(intervalField.value);
    }
    if (intervaloAutoField && intervaloAutoField.value) {
        globalState.control.intervaloAutoEC = parseInt(intervaloAutoField.value);
    }
    
    // Carregar valores da tabela nutricional
    document.querySelectorAll('tr[data-nutrient]').forEach(row => {
        const nutrient = row.getAttribute('data-nutrient');
        const mlInput = row.querySelector('.ml-por-litro');
        const relay = parseInt(row.getAttribute('data-relay'));
        
        if (mlInput && globalState.nutrition[nutrient]) {
            globalState.nutrition[nutrient].mlPorLitro = parseFloat(mlInput.value) || 0;
            globalState.nutrition[nutrient].relay = relay;
        }
    });
    
    console.log('‚úÖ Estado global inicializado:', globalState);
}

// Listeners para mudan√ßas de estado
addStateListener((section, field, oldValue, newValue) => {
    // Quando system.volume ou system.flowRate mudam, recalcular plano
    if ((section === 'system' && (field === 'volume' || field === 'flowRate')) ||
        (section === 'control' && field === 'intervaloBetweenNutrients')) {
        setTimeout(() => calculateNutritionPlan(), 50);
    }
    
    // Quando qualquer par√¢metro muda, atualizar equa√ß√£o
    if (section === 'system') {
        setTimeout(() => updateEquationDisplay(), 100);
    }
});

// Vari√°veis para a tabela de nutri√ß√£o (agora usando valores da se√ß√£o EC)
// Removidas as vari√°veis locais, agora usa os valores dos inputs da se√ß√£o EC

// Vari√°veis para controle de EC
let ecControlEnabled = false;
let currentECSetpoint = 1200;
let lastDosage = 0;

// Definir nomes dos rel√©s
const relayNames = {
    1: "Bomba pH-",
    2: "Bomba pH+",
    3: "Bomba A",
    4: "Bomba B",
    5: "Bomba C",
    6: "Bomba CalMag",
    7: "Luz UV",
    8: "Aerador"
};

// Mapeamento de nutrientes para rel√©s
const nutrientRelayMap = {
    "pH-": 1,
    "pH+": 2,
    "Grow": 3,
    "Micro": 4,
    "Bloom": 5,
    "CalMag": 6
};

// Objeto para armazenar par√¢metros salvos
let savedECParameters = {
    baseDose: 0,        // removido valor padr√£o
    flowRate: 0,        // removido valor padr√£o
    volume: 0,          // removido valor padr√£o
    totalMlPorLitro: 0,
    setpoint: 0,        // removido valor padr√£o
    timestamp: null
};

function initializeChart() {
    const ctx = document.getElementById('sensorChart').getContext('2d');
    chart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: timeLabels,
            datasets: [{
                label: 'pH',
                data: phData,
                borderColor: 'rgb(75, 192, 192)',
                tension: 0.4,
                yAxisID: 'y-ph'
            }, {
                label: 'EC (¬µS/cm)',
                data: ecData,
                borderColor: 'rgb(153, 102, 255)',
                tension: 0.4,
                yAxisID: 'y-ec'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            animation: false,
            scales: {
                'y-ph': {
                    type: 'linear',
                    position: 'left',
                    min: 4,
                    max: 7,
                    grid: {
                        color: 'rgba(255,255,255,0.1)'
                    },
                    ticks: {
                        color: 'white'
                    }
                },
                'y-ec': {
                    type: 'linear',
                    position: 'right',
                    min: 0,
                    max: 500,
                    grid: {
                        color: 'rgba(255,255,255,0.1)'
                    },
                    ticks: {
                        color: 'white'
                    }
                },
                x: {
                    ticks: {
                        color: 'white'
                    }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        color: 'white'
                    }
                }
            }
        }
    });
}

function updateClock() {
    const now = new Date();
    document.getElementById('current-time').textContent = now.toLocaleTimeString();
}

function updateWiFiStrength(rssi) {
    const wifiText = document.getElementById('wifi-strength');
    let strength;
    let icon;
    
    if (rssi >= -50) {
        strength = 'Excelente';
        icon = 'üì∂';
    } else if (rssi >= -70) {
        strength = 'Bom';
        icon = 'üì∂';
    } else {
        strength = 'Fraco';
        icon = 'üì∂';
    }
    
    wifiText.innerHTML = `${icon} WiFi: ${strength}`;
}

function updateChartScales() {
    if (ecData.length > 0 && phData.length > 0) {
        // Calcula limites para EC
        const maxEC = Math.max(...ecData) * 1.2;  
        const minEC = Math.min(...ecData) * 0.8;  

        // Calcula limites para pH
        const maxPH = Math.max(...phData) * 1.1;  
        const minPH = Math.max(0, Math.min(...phData) * 0.9);  

        // Atualiza as escalas
        chart.options.scales['y-ec'].max = maxEC;
        chart.options.scales['y-ec'].min = minEC;
        chart.options.scales['y-ph'].max = maxPH;
        chart.options.scales['y-ph'].min = minPH;
    }
}

function updateChart(ph, ec) {
    const now = new Date().toLocaleTimeString();
    
    timeLabels.push(now);
    phData.push(ph);
    ecData.push(ec);
    
    if (timeLabels.length > maxDataPoints) {
        timeLabels.shift();
        phData.shift();
        ecData.shift();
    }
    
    updateChartScales();
    chart.update('none');
}

function fetchSensorData() {
    fetch('/sensors')
        .then(response => response.json())
        .then(data => {
            // Atualizar valores
            document.getElementById('temp-value').textContent = data.temperature.toFixed(1);
            document.getElementById('ph-value').textContent = data.ph.toFixed(2);
            document.getElementById('ec-value').textContent = data.ec.toFixed(0);
            document.getElementById('tds-value').textContent = data.tds.toFixed(0);
            
            // Atualizar status do controle EC
            updateECStatus(data.ec);
            
            // Atualizar gr√°fico
            updateChart(data.ph, data.ec);
            
            // ===== ATUALIZAR TOGGLES DOS REL√âS =====
            if (data.relayStates && Array.isArray(data.relayStates)) {
                updateRelayToggles(data.relayStates);
            }
        })
        .catch(error => {
            console.error('Erro ao buscar dados:', error);
        });
}

function toggleRelay(relay, seconds = 0) {
    const relayNumber = relay + 1;
    const url = `/toggle${relayNumber}${seconds > 0 ? `?seconds=${seconds}` : ''}`;
    
    console.log(`üîÑ Alternando rel√© ${relayNumber}${seconds > 0 ? ` por ${seconds}s` : ''}`);
    
    fetch(url)
        .then(response => {
            if (!response.ok) {
                throw new Error('Erro ao controlar rel√©');
            }
            console.log(`‚úÖ Rel√© ${relayNumber} alternado com sucesso`);
            
            // Atualizar estado visual imediatamente
            const toggleSwitch = document.getElementById(`relay-${relayNumber}-toggle`);
            const statusText = document.getElementById(`relay-${relayNumber}-status`);
            
            if (toggleSwitch && statusText) {
                const isCurrentlyActive = toggleSwitch.classList.contains('active');
                
                if (seconds > 0) {
                    // Ativar temporariamente
                    toggleSwitch.classList.add('active');
                    statusText.textContent = `ON (${seconds}s)`;
                    statusText.className = 'relay-status active';
                    
                    // Desativar ap√≥s o tempo especificado
                    setTimeout(() => {
                        toggleSwitch.classList.remove('active');
                        statusText.textContent = 'OFF';
                        statusText.className = 'relay-status';
                    }, seconds * 1000);
                } else {
                    // Toggle simples
                    if (isCurrentlyActive) {
                        toggleSwitch.classList.remove('active');
                        statusText.textContent = 'OFF';
                        statusText.className = 'relay-status';
                    } else {
                        toggleSwitch.classList.add('active');
                        statusText.textContent = 'ON';
                        statusText.className = 'relay-status active';
                    }
                }
            }
            
            // Buscar estados atuais ap√≥s um pequeno delay
            setTimeout(() => {
                fetchSensorData();
            }, 500);
        })
        .catch(error => {
            console.error(`‚ùå Erro ao alternar rel√© ${relayNumber}:`, error);
            alert(`Erro ao controlar rel√© ${relayNumber}: ${error.message}`);
        });
}

// Adicionar fun√ß√£o para resetar o gr√°fico
function resetChart() {
    timeLabels.length = 0;
    phData.length = 0;
    ecData.length = 0;
    
    chart.data.labels = timeLabels;
    chart.data.datasets[0].data = phData;
    chart.data.datasets[1].data = ecData;
    
    chart.update('none');
    
    console.log('üìà Gr√°fico resetado');
}

document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Inicializando sistema hidrop√¥nico com estado global...');
    
    // ===== INICIALIZAR SISTEMA DE MONITORAMENTO PRIMEIRO =====
    communicationMonitor.init();
    communicationMonitor.interceptFetch(); // Interceptar todas as comunica√ß√µes
    
    initializeChart();
    fetchSensorData();
    fetchRelayStates();
    
    // Aguardar um pouco para garantir que o DOM est√° completamente carregado
    setTimeout(() => {
        // Inicializar estado global primeiro
        initializeGlobalState();
        
        // Configurar listeners baseados no estado global
        setupGlobalStateListeners();
        
        // Configurar outros listeners (bot√µes, etc.)
        setupOtherEventListeners();
        
        // Carregar par√¢metros salvos (vai sincronizar com estado global)
        loadSavedECParameters();
        
        // Calcular plano inicial
        calculateNutritionPlan();
        
        console.log('‚úÖ Sistema inicializado com estado global!');
        communicationMonitor.addLog('success', 'Sistema hidrop√¥nico totalmente inicializado');
    }, 100);
    
    // Teste final dos listeners ap√≥s 2 segundos
    setTimeout(() => {
        console.log('üîç Executando teste final do estado global...');
        testGlobalStateIntegration();
    }, 2000);
    
    // Atualizar sensores a cada 5 segundos
    setInterval(fetchSensorData, 5000);
    
    // Atualizar equa√ß√£o a cada 5 segundos (mais frequente)
    setInterval(() => {
        updateEquationDisplay().then(result => {
            if (result && result.result !== undefined) {
                // Atualizar info do controle EC no dashboard
                const nextDosage = globalState.control.autoECEnabled ? 
                    (result.result > 0.1 ? 'Dosagem necess√°ria' : 'Sem dosagem necess√°ria') : 
                    'Auto EC desativado';
                
                // Simular rel√©s ativos (baseado no √∫ltimo resultado)
                const activeRelays = result.distribution && result.distribution.length > 0 ?
                    result.distribution.filter(d => d.utNutriente > 0.01).map(d => d.relay).join(', ') :
                    'Nenhum';
                
                communicationMonitor.updateECInfo(result.result, nextDosage, activeRelays);
            }
        });
    }, 5000);
    
    // Atualizar erro atual a cada 3 segundos (ainda mais frequente)
    setInterval(() => {
        const currentECElement = document.getElementById('ec-value');
        const currentEC = currentECElement ? parseFloat(currentECElement.textContent) || 0 : 0;
        
        // Atualizar estado global com EC atual
        if (currentEC > 0) {
            globalState.control.currentECValue = currentEC;
        }
        
        // Atualizar apenas o erro se temos dados v√°lidos
        if (currentEC > 0) {
            const setpoint = globalState.system.ecSetpoint;
            const errorSpan = document.getElementById('ec-error');
            
            if (setpoint > 0 && errorSpan) {
                const error = setpoint - currentEC;
                errorSpan.textContent = `${error.toFixed(0)} ¬µS/cm`;
                
                // C√≥digo de cores para o erro
                if (Math.abs(error) > 100) {
                    errorSpan.className = 'status-value error';
                } else if (Math.abs(error) > 50) {
                    errorSpan.className = 'status-value warning';
                } else {
                    errorSpan.className = 'status-value';
                }
            }
        }
    }, 3000);
    
    console.log('‚úÖ Sistema de controle EC inicializado com estado global');
    console.log('üîß Distribui√ß√£o proporcional ativa');
    console.log('üì° Sistema de monitoramento ativo');
    console.log('‚è±Ô∏è Atualiza√ß√µes: Sensores 5s, Equa√ß√£o 5s, Erro 3s');
});

// Fun√ß√£o para configurar outros event listeners (bot√µes, etc.)
function setupOtherEventListeners() {
    console.log('üîß Configurando outros event listeners...');
    
    // Event listener para o bot√£o de salvar par√¢metros EC
    const saveBtn = document.getElementById('save-ec-params');
    if (saveBtn) {
        saveBtn.removeEventListener('click', saveECParametersFromGlobalState);
        saveBtn.addEventListener('click', saveECParametersFromGlobalState);
        console.log('‚úÖ Listener do bot√£o salvar configurado');
    }
    
    // Event listener para toggle do auto EC
    const toggleBtn = document.getElementById('toggle-auto-ec');
    if (toggleBtn) {
        toggleBtn.removeEventListener('click', handleToggleAutoEC);
        toggleBtn.addEventListener('click', handleToggleAutoEC);
        console.log('‚úÖ Listener do bot√£o toggle Auto EC configurado');
    }
    
    // Event listener para cancelar Auto EC
    const cancelBtn = document.getElementById('cancel-auto-ec');
    if (cancelBtn) {
        cancelBtn.removeEventListener('click', handleCancelAutoEC);
        cancelBtn.addEventListener('click', handleCancelAutoEC);
        console.log('‚úÖ Listener do bot√£o cancelar Auto EC configurado');
    }
    
    // ===== üö® EVENT LISTENER PARA RESET EMERGENCIAL =====
    const emergencyResetBtn = document.getElementById('emergency-reset');
    if (emergencyResetBtn) {
        emergencyResetBtn.removeEventListener('click', handleEmergencyReset);
        emergencyResetBtn.addEventListener('click', handleEmergencyReset);
        console.log('‚úÖ Listener do bot√£o RESET EMERGENCIAL configurado');
    }
    
    // COMENTADO - BOT√ÉO DOSAGEM PROPORCIONAL REMOVIDO
    /*
    // Event listener para dosagem proporcional manual
    const dosageBtn = document.getElementById('executar-dosagem-proporcional');
    if (dosageBtn) {
        dosageBtn.removeEventListener('click', handleDosagemProporcional);
        dosageBtn.addEventListener('click', handleDosagemProporcional);
        console.log('‚úÖ Listener do bot√£o dosagem proporcional configurado');
    }
    */
    
    // ===== NOVOS BOT√ïES LIMPAR VALORES =====
    
    // Event listener para bot√£o Limpar Valores EC
    const clearECBtn = document.getElementById('clear-ec-values');
    if (clearECBtn) {
        clearECBtn.removeEventListener('click', handleClearECValues);
        clearECBtn.addEventListener('click', handleClearECValues);
        console.log('‚úÖ Listener do bot√£o limpar valores EC configurado');
    }
    
    // Event listener para bot√£o Limpar Plano Nutricional
    const clearNutritionBtn = document.getElementById('clear-nutrition-plan');
    if (clearNutritionBtn) {
        clearNutritionBtn.removeEventListener('click', handleClearNutritionPlan);
        clearNutritionBtn.addEventListener('click', handleClearNutritionPlan);
        console.log('‚úÖ Listener do bot√£o limpar plano nutricional configurado');
    }
}

// Fun√ß√£o para testar integra√ß√£o do estado global
function testGlobalStateIntegration() {
    console.log('üß™ Testando integra√ß√£o do estado global...');
    
    // Verificar se campos est√£o sincronizados
    const volumeField = document.getElementById('volume-reservoir');
    const flowRateField = document.getElementById('flow-rate');
    const nutritionInputs = document.querySelectorAll('.ml-por-litro');
    
    if (!volumeField || !flowRateField) {
        console.error('‚ùå Campos principais n√£o encontrados');
        return false;
    }
    
    if (nutritionInputs.length === 0) {
        console.error('‚ùå Inputs de nutri√ß√£o n√£o encontrados');
        return false;
    }
    
    console.log(`‚úÖ Volume field: ${volumeField.value} (estado: ${globalState.system.volume})`);
    console.log(`‚úÖ Flow rate field: ${flowRateField.value} (estado: ${globalState.system.flowRate})`);
    console.log(`‚úÖ Nutrition inputs: ${nutritionInputs.length} encontrados`);
    console.log(`‚úÖ Estado global nutrition:`, globalState.nutrition);
    
    // Teste de sincroniza√ß√£o: mudar valor no estado e ver se atualiza interface
    console.log('üîß Testando sincroniza√ß√£o autom√°tica...');
    syncAllFields();
    
    console.log('‚úÖ Teste de integra√ß√£o do estado global conclu√≠do!');
    return true;
}

// Fun√ß√£o para calcular distribui√ß√£o proporcional do u(t) entre nutrientes
function calculateProportionalDistribution(totalUt) {
    console.log('üßÆ Calculando distribui√ß√£o proporcional com ALTA PRECIS√ÉO (3 casas decimais)...');
    console.log(`üíß Total u(t): ${totalUt.toFixed(3)} ml`);
    
    const volume = globalState.system.volume;
    const flowRate = globalState.system.flowRate;
    
    console.log(`üéØ Par√¢metros: Volume=${volume}L, FlowRate=${flowRate.toFixed(3)}ml/s`);
    
    let distribution = [];
    let totalProportion = 0;
    
    // Calcular propor√ß√µes baseadas no estado global
    Object.keys(globalState.nutrition).forEach(nutrient => {
        const nutritionData = globalState.nutrition[nutrient];
        const mlPorLitro = nutritionData.mlPorLitro;
        
        if (mlPorLitro > 0) {
            totalProportion += mlPorLitro;
        }
    });
    
    console.log(`üìä Total ml/L: ${totalProportion.toFixed(3)} ml/L`);
    console.log('\n=== DISTRIBUI√á√ÉO PROPORCIONAL (ESTADO GLOBAL) ===');
    
    // Criar distribui√ß√£o proporcional
    Object.keys(globalState.nutrition).forEach(nutrient => {
        const nutritionData = globalState.nutrition[nutrient];
        const mlPorLitro = nutritionData.mlPorLitro;
        
        if (mlPorLitro > 0 && totalProportion > 0) {
            // PRECIS√ÉO DE 3 CASAS DECIMAIS
            const proporcao = mlPorLitro / totalProportion;
        const utNutriente = totalUt * proporcao;
            const tempoDosagem = utNutriente / flowRate;
        
            console.log(`üß™ ${nutrient}: ${mlPorLitro.toFixed(3)} ml/L (${(proporcao * 100).toFixed(1)}%) ‚Üí u(t)=${utNutriente.toFixed(3)} ml ‚Üí ${tempoDosagem.toFixed(3)}s`);
        
        distribution.push({
                nutriente: nutrient,
                relay: nutritionData.relay,
                mlPorLitro: parseFloat(mlPorLitro.toFixed(3)),
                proporcao: parseFloat(proporcao.toFixed(6)), // 6 decimais para propor√ß√£o
                utNutriente: parseFloat(utNutriente.toFixed(3)),
                tempoDosagem: parseFloat(tempoDosagem.toFixed(3)) // ALTA PRECIS√ÉO!
            });
        }
    });
    
    console.log('============================================');
    
    return distribution;
}

// Fun√ß√£o moderna para atualizar a exibi√ß√£o da equa√ß√£o usando estado global
function updateEquationDisplay() {
    console.log('üßÆ Atualizando equa√ß√£o com estado global...');
    
    // Usar valores do estado global
    const { volume, flowRate, baseDose, totalMlPorLitro, ecSetpoint } = globalState.system;
    
    // Verificar se todos os par√¢metros s√£o v√°lidos
    if (volume <= 0 || flowRate <= 0 || baseDose <= 0 || totalMlPorLitro <= 0 || ecSetpoint <= 0) {
        // Mostrar valores do estado global mesmo se incompletos
        document.getElementById('eq-volume').textContent = `${volume} L`;
        document.getElementById('eq-k-value').textContent = '0.000';
        document.getElementById('eq-flow-rate').textContent = `${flowRate} ml/s`;
        document.getElementById('eq-error').textContent = '-- ¬µS/cm';
        document.getElementById('eq-result').textContent = '-- ml';
        document.getElementById('eq-time').textContent = '-- segundos';
        
        console.log('‚ö†Ô∏è Par√¢metros incompletos no estado global');
        return Promise.resolve({ result: 0, dosageTime: 0, k: 0, error: 0, distribution: [] });
    }
    
    // Usar o controller real do ESP32 para calcular u(t)
    const data = {
        baseDose: baseDose,
        flowRate: flowRate,
        volume: volume,
        totalMlPorLitro: totalMlPorLitro,
        ecSetpoint: ecSetpoint
    };
    
    // Atualizar indicador de status para loading
    const indicator = document.getElementById('controller-indicator');
    if (indicator) {
        indicator.textContent = 'üîÑ Calculando com Controller ESP32...';
        indicator.className = 'controller-status-text loading';
    }
    
    // Fazer requisi√ß√£o para o controller real
    return fetch('/ec-calculate', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Falha ao calcular u(t) no controller');
        }
        return response.json();
    })
    .then(controllerResult => {
        // Atualizar indicador de status
        const indicator = document.getElementById('controller-indicator');
        if (indicator) {
        indicator.textContent = '‚úÖ Controller ESP32 Conectado';
        indicator.className = 'controller-status-text connected';
        }
        
        // Usar os resultados do controller real
        const volumeML = controllerResult.utResult;  // u(t) √© VOLUME em ml (resultado da equa√ß√£o)
        const dosageTimeConverted = controllerResult.dosageTime; // Tempo: volume √ó flowRate_s/ml
        const error = controllerResult.error;
        const k = controllerResult.k;
        const ecAtual = controllerResult.ecAtual;
        
        // Calcular tempo real baseado no volume: tempo = volume √ó flowRate_s/ml
        const tempoSegundos = volumeML * flowRate;  // ml √ó s/ml = segundos
        
        // ===== NOVA EQUA√á√ÉO DE ACCURACY =====
        // EC(‚àû) = EC(0) + (k √ó q/v) √ó Kp √ó e  ‚Üí equa√ß√£o proporcional
        const A = ((k * flowRate) / (volume * 1000)) * error;  // CORRIGIDO: Din√¢mica!
        const Kp = 1.0; // Ganho proporcional
        const ecFinalPrevisto = ecAtual + A  * Kp * error;  // CORRIGIDO: Sem duplica√ß√£o
        
        // Atualizar estado global com EC atual
        globalState.control.currentECValue = ecAtual;
        
        // Atualizar par√¢metros na interface
        document.getElementById('eq-volume').textContent = `${volume} L`;
        document.getElementById('eq-k-value').textContent = k.toFixed(3);
        document.getElementById('eq-flow-rate').textContent = `${flowRate} ml/s`;
        document.getElementById('eq-error').textContent = `${error.toFixed(0)} ¬µS/cm`;
        
        // MANTER INTERFACE VISUAL: u(t) mostrado como "segundos" mas internamente √© volume
        const resultElement = document.getElementById('eq-result');
        const timeElement = document.getElementById('eq-time');
        const ecGainElement = document.getElementById('eq-ec-gain');
        
        // INTERFACE VISUAL MANTIDA: mostra tempo calculado
        if (resultElement) resultElement.textContent = `${tempoSegundos.toFixed(1)}`;  // Tempo calculado
        if (timeElement) timeElement.textContent = `${flowRate.toFixed(3)} s/ml`;  // FlowRate correto
        
        // Calcular ganho f√≠sico real do sistema: (k * volume_ml) / volume_total
        let physicalGain = 0;
        if (volume > 0 && k > 0) {
            physicalGain = (k * volumeML) / volume;
        }
        
        // ===== CORRETO: MOSTRAR GANHO F√çSICO EM ¬µS/cm =====
        if (ecGainElement) {
            ecGainElement.textContent = `${physicalGain.toFixed(1)}`;  // CORRETO: Ganho f√≠sico em ¬µS/cm
            
            // Destacar se o ganho f√≠sico for significativo (mais que 10 ¬µS/cm)
            if (physicalGain > 10) {
                ecGainElement.classList.add('highlight');
            } else {
                ecGainElement.classList.remove('highlight');
            }
        }
        
        // Destacar resultado se for significativo
        if (tempoSegundos > 0.1) {
            if (resultElement) resultElement.classList.add('highlight');
            if (timeElement) timeElement.classList.add('highlight');
        } else {
            if (resultElement) resultElement.classList.remove('highlight');
            if (timeElement) timeElement.classList.remove('highlight');
        }
        
        // Calcular distribui√ß√£o proporcional usando o VOLUME calculado
        const distribution = calculateProportionalDistribution(volumeML);
        
        // Log para debug com distribui√ß√£o detalhada - CORRIGIDO
        console.log(`\n=== EQUA√á√ÉO EC CONTROLLER REAL (CORRIGIDO) ===`);
        console.log(`u(t) volume calculado: ${volumeML.toFixed(3)} ml`);
        console.log(`Tempo equivalente: ${tempoSegundos.toFixed(3)} segundos`);
        console.log(`k: ${k.toFixed(3)} (${baseDose}/${totalMlPorLitro})`);
        console.log(`EC Atual: ${ecAtual.toFixed(1)} ¬µS/cm`);
        console.log(`EC Setpoint: ${ecSetpoint} ¬µS/cm`);
        console.log(`Erro: ${error.toFixed(1)} ¬µS/cm`);
        console.log(`FlowRate: ${flowRate.toFixed(3)} s/ml`);
        console.log(`\n=== EQUA√á√ÉO DE ACCURACY ===`);
        console.log(`EC(‚àû) = EC(0) + (k √ó q/v) √ó Kp √ó e`);
        console.log(`EC(‚àû) = ${ecAtual.toFixed(1)} + (${k.toFixed(3)} √ó ${flowRate}/${volume}) √ó 1.0 √ó ${error.toFixed(1)}`);
        console.log(`Incremento Œî = ${A.toFixed(2)} ¬µS/cm`);
        console.log(`EC(‚àû) previsto = ${ecAtual.toFixed(1)} + ${A.toFixed(2)} = ${ecFinalPrevisto.toFixed(1)} ¬µS/cm`);
        console.log(`Ganho f√≠sico: ${physicalGain.toFixed(1)} ¬µS/cm`);
        console.log(`\n=== DISTRIBUI√á√ÉO PROPORCIONAL (ESTADO GLOBAL) ===`);
        
        // ===== ATUALIZAR INTERFACE DE ACCURACY =====
        updateAccuracySection(A, ecAtual, ecFinalPrevisto);
        
        distribution.forEach(item => {
            console.log(`${item.nutriente}: ${item.mlPorLitro} ml/L (${(item.proporcao * 100).toFixed(1)}%) ‚Üí dosagem=${item.utNutriente.toFixed(3)} ml ‚Üí tempo=${item.tempoDosagem.toFixed(2)}s`);
        });
        
        // ===== ENVIAR PROPOR√á√ïES PARA ESP32 =====
        sendNutrientProportionsToESP32(distribution);
        
        // Salvar resultado para uso em outras fun√ß√µes - CORRIGIDO
        window.lastControllerResult = { 
            result: volumeML,        // Volume em ML para distribui√ß√£o proporcional
            utSegundos: tempoSegundos,  // u(t) em segundos (tempo de atua√ß√£o)
            dosageTime: dosageTimeConverted,  // Convers√£o s/ml
            A: A,                    // Equa√ß√£o de accuracy
            ecFinalPrevisto: ecFinalPrevisto, // EC final previsto
            k, error, distribution, ecAtual 
        };
        
        return { 
            result: volumeML,        // Volume em ML para distribui√ß√£o
            utSegundos: tempoSegundos,  // u(t) em segundos
            dosageTime: dosageTimeConverted,  // Convers√£o
            A: A,                    // Accuracy
            ecFinalPrevisto: ecFinalPrevisto, // EC final
            k, error, distribution 
        };
    })
    .catch(error => {
        console.error('‚ùå Erro ao calcular u(t) no controller:', error);
        
        // Atualizar indicador de status para erro
        const indicator = document.getElementById('controller-indicator');
        if (indicator) {
        indicator.textContent = '‚ùå Controller ESP32 Desconectado - Usando C√°lculo Local';
        indicator.className = 'controller-status-text disconnected';
        }
        
        // Fallback: calcular localmente se o controller falhar
        const k = totalMlPorLitro > 0 ? baseDose / totalMlPorLitro : 0;
        const currentECValue = globalState.control.currentECValue || 0;
        const errorLocal = ecSetpoint - currentECValue;
        
        let volumeMLLocal = 0;    // u(t) √© VOLUME em ml (resultado da equa√ß√£o)
        let tempoSegundosLocal = 0;  // Tempo calculado a partir do volume
        
        if (k > 0 && flowRate > 0) {
            // Equa√ß√£o correta: u(t) = (V / k √ó q) √ó e = VOLUME em ml
            volumeMLLocal = (volume / (k * flowRate)) * errorLocal;
            
            // Aplicar limita√ß√µes (como no Controller.cpp)
            if (volumeMLLocal < 0) volumeMLLocal = 0;
            // REMOVIDO: if (volumeMLLocal > 10.0) volumeMLLocal = 10.0;
            
            // Calcular tempo: tempo = volume √ó flowRate_s/ml
            tempoSegundosLocal = volumeMLLocal * flowRate;
        }
        
        // ===== EQUA√á√ÉO DE ACCURACY LOCAL (DIN√ÇMICA) =====
        const ALocal = (k * flowRate * errorLocal) / (volume * 1000);  // CORRIGIDO: Din√¢mica!
        const KpLocal = 1.0;
        const ecFinalPrevistoLocal = currentECValue + ALocal * KpLocal * errorLocal;  // NOVA F√ìRMULA: A √ó Kp √ó error
        
        // Calcular distribui√ß√£o proporcional usando volume calculado
        const distribution = calculateProportionalDistribution(volumeMLLocal);
        
        // Atualizar interface com c√°lculo local - MANTENDO VISUAL
        document.getElementById('eq-volume').textContent = `${volume} L`;
        document.getElementById('eq-k-value').textContent = k.toFixed(3);
        document.getElementById('eq-flow-rate').textContent = `${flowRate} ml/s`;
        document.getElementById('eq-error').textContent = `${errorLocal.toFixed(0)} ¬µS/cm`;
        document.getElementById('eq-result').textContent = `${tempoSegundosLocal.toFixed(3)}`;  // Tempo calculado
        document.getElementById('eq-time').textContent = `${flowRate.toFixed(3)} s/ml`;  // FlowRate correto
        
        // Calcular ganho f√≠sico real do sistema tamb√©m no fallback
        let physicalGainLocal = 0;
        if (volume > 0 && k > 0) {
            physicalGainLocal = (k * volumeMLLocal) / volume;
        }
        
        const ecGainElement = document.getElementById('eq-ec-gain');
        if (ecGainElement) {
            ecGainElement.textContent = `${physicalGainLocal.toFixed(1)}`;  // CORRETO: Ganho f√≠sico em ¬µS/cm
            
            // Destacar se o ganho f√≠sico for significativo (mais que 10 ¬µS/cm)
            if (physicalGainLocal > 10) {
                ecGainElement.classList.add('highlight');
            } else {
                ecGainElement.classList.remove('highlight');
            }
        }
        
        console.log('üîß C√ÅLCULO LOCAL (corrigido):');
        console.log(`   u(t) volume: ${volumeMLLocal.toFixed(3)} ml`);
        console.log(`   Tempo equivalente: ${tempoSegundosLocal.toFixed(3)} segundos`);
        console.log(`   k: ${k.toFixed(3)}, erro: ${errorLocal.toFixed(1)} ¬µS/cm`);
        console.log(`   FlowRate: ${flowRate.toFixed(3)} s/ml`);
        console.log(`   === EQUA√á√ÉO DE ACCURACY LOCAL ===`);
        console.log(`   EC(‚àû) = EC(0) + (k √ó q/v) √ó Kp √ó e`);
        console.log(`   EC(‚àû) = ${currentECValue.toFixed(1)} + (${k.toFixed(3)} √ó ${flowRate}/${volume}) √ó 1.0 √ó ${errorLocal.toFixed(1)}`);
        console.log(`   Incremento Œî = ${ALocal.toFixed(2)} ¬µS/cm`);
        console.log(`   EC(‚àû) previsto = ${currentECValue.toFixed(1)} + ${ALocal.toFixed(2)} = ${ecFinalPrevistoLocal.toFixed(1)} ¬µS/cm`);
        console.log(`   Ganho f√≠sico: ${physicalGainLocal.toFixed(1)} ¬µS/cm`);
        
        // ===== ATUALIZAR INTERFACE DE ACCURACY LOCAL =====
        updateAccuracySection(ALocal, currentECValue, ecFinalPrevistoLocal);
        
        return Promise.resolve({ 
            result: volumeMLLocal,      // Volume em ML para distribui√ß√£o
            utSegundos: tempoSegundosLocal, // u(t) em segundos
            dosageTime: flowRate,   // Convers√£o s/ml
            A: ALocal,                  // Accuracy
            ecFinalPrevisto: ecFinalPrevistoLocal, // EC final
            k, 
            error: errorLocal, 
            distribution 
        });
    });
}

// Atualizar a fun√ß√£o updateECStatus para incluir a equa√ß√£o
function updateECStatus(currentEC) {
    const errorSpan = document.getElementById('ec-error');
    const lastDosageSpan = document.getElementById('last-dosage');
    
    // Sempre calcular e mostrar o erro atual, independente do Auto EC estar ativo
    const setpoint = parseFloat(document.getElementById('ec-setpoint').value) || 0;
    
    if (setpoint > 0) {
        const error = setpoint - currentEC;
        errorSpan.textContent = `${error.toFixed(0)} ¬µS/cm`;
        
        // C√≥digo de cores para o erro
        if (Math.abs(error) > 100) {
            errorSpan.className = 'status-value error';
        } else if (Math.abs(error) > 50) {
            errorSpan.className = 'status-value warning';
        } else {
            errorSpan.className = 'status-value';
        }
        
        // Atualizar currentECSetpoint para outras fun√ß√µes
        currentECSetpoint = setpoint;
    } else {
        errorSpan.textContent = '-- ¬µS/cm';
        errorSpan.className = 'status-value';
    }
    
    // Atualizar √∫ltima dosagem
    if (lastDosage > 0) {
        lastDosageSpan.textContent = `${lastDosage.toFixed(2)} ml`;
    } else {
        lastDosageSpan.textContent = '-- ml';
    }
    
    // Atualizar exibi√ß√£o da equa√ß√£o sempre que h√° novos dados dos sensores
    updateEquationDisplay();
}

// Fun√ß√£o para carregar status do controle EC
function loadECStatus() {
    fetch('/ec-status')
        .then(response => response.json())
        .then(data => {
            document.getElementById('base-dose').value = data.baseDose;
            document.getElementById('flow-rate').value = data.flowRate;
            document.getElementById('volume-reservoir').value = data.volume;
            // document.getElementById('total-ml').value = data.totalMl; // Agora calculado automaticamente
            document.getElementById('ec-setpoint').value = data.setpoint;
            
            ecControlEnabled = data.autoEnabled;
            currentECSetpoint = data.setpoint;
            
            updateECControlUI();
            
            // Recalcular o plano nutricional com os novos valores
            calcularQuantidadeETempo();
            
            // Atualizar exibi√ß√£o da equa√ß√£o
            updateEquationDisplay();
        })
        .catch(error => {
            console.error('Erro ao carregar status EC:', error);
        });
}

// Fun√ß√£o para carregar par√¢metros salvos
function loadSavedECParameters() {
    // Tentar carregar do localStorage primeiro
    const localSaved = localStorage.getItem('hydroponicECParameters');
    if (localSaved) {
        try {
            const params = JSON.parse(localSaved);
            
            // Aplicar aos campos
            document.getElementById('base-dose').value = params.baseDose || 1525;
            document.getElementById('flow-rate').value = params.flowRate || 0.974;
            document.getElementById('volume-reservoir').value = params.volume || 100;
            document.getElementById('ec-setpoint').value = params.setpoint || 1200;
            
            savedECParameters = params;
            
            console.log('‚úÖ Par√¢metros EC carregados do localStorage');
        } catch (e) {
            console.log('‚ùå Erro ao carregar par√¢metros do localStorage:', e);
        }
    }
    
    // Tentar carregar do servidor
    fetch('/ec-config')
        .then(response => response.json())
        .then(data => {
            if (data.baseDose !== undefined) {
                document.getElementById('base-dose').value = data.baseDose;
            }
            if (data.flowRate !== undefined) {
                document.getElementById('flow-rate').value = data.flowRate;
            }
            if (data.volume !== undefined) {
                document.getElementById('volume-reservoir').value = data.volume;
            }
            if (data.totalMl !== undefined) {
                // Nota: totalMl do servidor n√£o substitui o calculado
                // Apenas para hist√≥rico
            }
            
            console.log('‚úÖ Par√¢metros EC carregados do servidor');
            
            // Recalcular tudo
            calcularQuantidadeETempo();
            updateEquationDisplay();
        })
        .catch(error => {
            console.log('‚ö†Ô∏è N√£o foi poss√≠vel carregar par√¢metros do servidor:', error);
        });
}

// Fun√ß√£o para implementar dosagem autom√°tica proporcional
function executarDosagemProporcional(totalUt) {
    console.log('üöÄ Executando dosagem proporcional com ALTA PRECIS√ÉO...');
    
    const distribution = calculateProportionalDistribution(totalUt);
    const intervalo = globalState.control.intervaloBetweenNutrients;
    
    if (distribution.length === 0) {
        alert('‚ùå Nenhum nutriente configurado para dosagem!');
        return;
    }
    
    console.log('\n=== ENVIANDO PARA ESP32 (ALTA PRECIS√ÉO) ===');
    console.log(`üìä Total u(t): ${totalUt.toFixed(3)} ml`);
    console.log(`‚è±Ô∏è  Intervalo: ${intervalo} segundos`);
    console.log(`üß™ Nutrientes: ${distribution.length}`);
    
    distribution.forEach(item => {
        console.log(`   ‚Ä¢ ${item.nutriente}: ${item.utNutriente.toFixed(3)}ml ‚Üí ${item.tempoDosagem.toFixed(3)}s ‚Üí Rel√© ${item.relay}`);
    });
    
    const data = {
        totalUt: parseFloat(totalUt.toFixed(3)), // PRECIS√ÉO 3 DECIMAIS
        distribution: distribution,
        intervalo: intervalo
    };
    
    communicationMonitor.addLog('data', `Iniciando dosagem: ${totalUt.toFixed(3)}ml distribu√≠da em ${distribution.length} nutrientes`);
    
    fetch('/dosagem-proporcional', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Falha na comunica√ß√£o com ESP32');
        }
        console.log('‚úÖ Dosagem proporcional enviada com sucesso para ESP32');
        communicationMonitor.addLog('success', `Dosagem enviada: ${distribution.length} nutrientes com precis√£o de 3 decimais`);
        
        alert(`üöÄ DOSAGEM PROPORCIONAL INICIADA!

üìä DISTRIBUI√á√ÉO DE ALTA PRECIS√ÉO:
${distribution.map(item => 
    `‚Ä¢ ${item.nutriente}: ${item.utNutriente.toFixed(3)}ml (${item.tempoDosagem.toFixed(3)}s)`
).join('\n')}

‚è±Ô∏è  Intervalo entre doses: ${intervalo}s
üéØ Total u(t): ${totalUt.toFixed(3)}ml

‚úÖ Sistema sequencial ativo no ESP32!`);
        
        // Atualizar interface
        communicationMonitor.updateECInfo(totalUt, `${distribution.length} nutrientes`, distribution.map(d => d.relay).join(','));
        
    })
    .catch(error => {
        console.error('‚ùå Erro na dosagem proporcional:', error);
        communicationMonitor.addLog('error', `Falha na dosagem: ${error.message}`);
        alert(`‚ùå ERRO NA DOSAGEM PROPORCIONAL

Falha na comunica√ß√£o com ESP32:
${error.message}

Verifique a conex√£o e tente novamente.`);
    });
}

// Fun√ß√£o para salvar par√¢metros do controlador EC usando estado global
function saveECParametersFromGlobalState() {
    console.log('üíæ Salvando par√¢metros EC do estado global...');
    communicationMonitor.addLog('info', 'Iniciando salvamento de par√¢metros EC');
    
    const { system } = globalState;
    const { baseDose, flowRate, volume, totalMlPorLitro, ecSetpoint } = system;
    
    console.log('üìä Par√¢metros do estado global:');
    console.log(`   ‚Ä¢ Base dose: ${baseDose} ¬µS/cm`);
    console.log(`   ‚Ä¢ Flow rate: ${flowRate} ml/s`);
    console.log(`   ‚Ä¢ Volume: ${volume} L`);
    console.log(`   ‚Ä¢ Total ml/L: ${totalMlPorLitro} ml/L`);
    console.log(`   ‚Ä¢ Setpoint: ${ecSetpoint} ¬µS/cm`);
    
    if (isNaN(baseDose) || isNaN(flowRate) || isNaN(volume) || isNaN(totalMlPorLitro) || isNaN(ecSetpoint)) {
        const errorMsg = `‚ùå ERRO: Par√¢metros inv√°lidos no estado global!

Por favor, verifique os seguintes campos:
‚Ä¢ Base dose: ${isNaN(baseDose) ? '‚ùå INV√ÅLIDO' : '‚úÖ ' + baseDose + ' ¬µS/cm'}
‚Ä¢ Taxa de vaz√£o: ${isNaN(flowRate) ? '‚ùå INV√ÅLIDO' : '‚úÖ ' + flowRate + ' ml/s'}
‚Ä¢ Volume: ${isNaN(volume) ? '‚ùå INV√ÅLIDO' : '‚úÖ ' + volume + ' L'}
‚Ä¢ Soma ml/L: ${isNaN(totalMlPorLitro) ? '‚ùå INV√ÅLIDO' : '‚úÖ ' + totalMlPorLitro + ' ml/L'}
‚Ä¢ Setpoint: ${isNaN(setpoint) ? '‚ùå INV√ÅLIDO' : '‚úÖ ' + ecSetpoint + ' ¬µS/cm'}

‚ö†Ô∏è O campo "Soma ml por Litro" √© calculado automaticamente.
Se estiver zerado, verifique se os valores ml/L na tabela nutricional est√£o preenchidos.`;
        
        alert(errorMsg);
        console.error('‚ùå Valida√ß√£o falhou:', system);
        communicationMonitor.addLog('error', 'Salvamento cancelado: par√¢metros inv√°lidos');
            return;
        }
        
    // Salvar no objeto de par√¢metros salvos (compatibilidade)
    savedECParameters = {
        baseDose: baseDose,
        flowRate: flowRate,
        volume: volume,
        totalMlPorLitro: totalMlPorLitro,
        setpoint: ecSetpoint,
        timestamp: new Date().toLocaleString('pt-BR')
    };
    
    // Salvar no localStorage tamb√©m
    localStorage.setItem('hydroponicECParameters', JSON.stringify(savedECParameters));
    console.log('üíæ Par√¢metros salvos no localStorage');
    communicationMonitor.addLog('success', 'Par√¢metros salvos localmente');
    
    const data = {
        baseDose: parseFloat(baseDose.toFixed(6)),        // 6 decimais para maior precis√£o
        flowRate: parseFloat(flowRate.toFixed(6)),        // 6 decimais para flowRate preciso
        volume: parseFloat(volume.toFixed(3)),            // 3 decimais para volume
        totalMl: parseFloat(totalMlPorLitro.toFixed(6)),  // 6 decimais para c√°lculo k preciso
        intervaloAutoEC: globalState.control.intervaloAutoEC // Novo campo
    };
    
    console.log('üì° Enviando dados ALTA PRECIS√ÉO para o ESP32...');
    console.log(`   ‚Ä¢ baseDose: ${data.baseDose} ¬µS/cm (6 decimais)`);
    console.log(`   ‚Ä¢ flowRate: ${data.flowRate} ml/s (6 decimais)`);  
    console.log(`   ‚Ä¢ volume: ${data.volume} L (3 decimais)`);
    console.log(`   ‚Ä¢ totalMl: ${data.totalMl} ml/L (6 decimais)`);
    console.log(`   ‚Ä¢ k calculado: ${(data.baseDose / data.totalMl).toFixed(6)}`);
    communicationMonitor.addLog('data', `Enviando ALTA PRECIS√ÉO: k=${(data.baseDose/data.totalMl).toFixed(3)}, Flow=${data.flowRate}ml/s`);
    
    fetch('/ec-config', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
        body: JSON.stringify(data)
        })
        .then(response => {
        if (!response.ok) {
            throw new Error('Falha ao salvar par√¢metros no ESP32');
        }
        console.log('‚úÖ Par√¢metros enviados com sucesso para o ESP32');
        communicationMonitor.addLog('success', 'Par√¢metros salvos no ESP32 com sucesso');
        
        // Calcular k para mostrar no alert
        const k = totalMlPorLitro > 0 ? baseDose / totalMlPorLitro : 0;
        
        console.log('üßÆ Calculando resultado com controller...');
        
        // Calcular u(t) atual usando o controller real
        updateEquationDisplay().then(() => {
            const controllerResult = window.lastControllerResult;
            
            let alertMessage = `‚úÖ PAR√ÇMETROS EC SALVOS COM SUCESSO!

üîß CONFIGURA√á√ÉO SALVA (ESTADO GLOBAL SINCRONIZADO):
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ üìä Base de dose: ${baseDose} ¬µS/cm
‚Ä¢ üíß Taxa de vaz√£o: ${flowRate} ml/s  
‚Ä¢ ü™£ Volume reservat√≥rio: ${volume} L
‚Ä¢ üß™ Soma ml por Litro: ${totalMlPorLitro.toFixed(1)} ml/L
‚Ä¢ üéØ EC Setpoint: ${ecSetpoint} ¬µS/cm
‚Ä¢ ‚è±Ô∏è  Intervalo Auto EC: ${globalState.control.intervaloAutoEC}s (anti-precipita√ß√£o)
‚Ä¢ ‚ö° Fator k calculado: ${k.toFixed(3)}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

            if (controllerResult && controllerResult.result !== undefined) {
                // CORRE√á√ÉO: Usar nomenclatura correta
                const volumeML = controllerResult.result; // Volume em ml (resultado da equa√ß√£o)
                const utSegundos = controllerResult.dosageTime; // u(t) tempo em segundos
                
                alertMessage += `

üéØ RESULTADO DO CONTROLLER ESP32:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìê Equa√ß√£o: u(t) = (V / k √ó q) √ó e
üìä C√°lculo: u(t) = (${volume} / ${k.toFixed(3)} √ó ${flowRate}) √ó ${controllerResult.error.toFixed(1)}

üìä Volume dosagem: ${volumeML.toFixed(3)} ml (quantidade a dosar)
‚è±Ô∏è  u(t) tempo: ${utSegundos.toFixed(2)} segundos (tempo de atua√ß√£o)

üìà Status Atual:
‚Ä¢ EC Atual: ${controllerResult.ecAtual.toFixed(1)} ¬µS/cm
‚Ä¢ EC Setpoint: ${ecSetpoint} ¬µS/cm
‚Ä¢ Erro: ${controllerResult.error.toFixed(1)} ¬µS/cm
‚Ä¢ Ganho f√≠sico: ${((k * volumeML) / volume).toFixed(1)} ¬µS/cm
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;
                
                communicationMonitor.addLog('data', `Controller ESP32: volume=${volumeML.toFixed(3)}ml, u(t)=${utSegundos.toFixed(2)}s, erro=${controllerResult.error.toFixed(1)}¬µS/cm`);
            } else {
                alertMessage += `

‚ö†Ô∏è CONTROLLER ESP32 OFFLINE
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìê Equa√ß√£o: u(t) = (V / k √ó q) √ó e
üìä C√°lculo: u(t) = (${volume} / ${k.toFixed(3)} √ó ${flowRate}) √ó erro
üîå Status: Conecte o ESP32 para c√°lculo preciso!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;
                
                communicationMonitor.addLog('error', 'Controller ESP32 n√£o respondeu para c√°lculo u(t)');
            }

            alertMessage += `

üïê TIMESTAMP: ${savedECParameters.timestamp}

üöÄ SISTEMA INTEGRADO PRONTO!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ Estado global sincronizado
‚úÖ Distribui√ß√£o proporcional ativa
‚úÖ Todos os par√¢metros validados
‚úÖ Sistema sincronizado com ESP32
‚úÖ Plano nutricional integrado com controle EC

üìã PLANO NUTRICIONAL ATUAL (ESTADO GLOBAL):`;

            // Adicionar informa√ß√µes do plano nutricional do estado global
            Object.keys(globalState.nutrition).forEach(nutrient => {
                const nutritionData = globalState.nutrition[nutrient];
                const quantidade = (nutritionData.mlPorLitro * volume).toFixed(1);
                alertMessage += `\n‚Ä¢ ${nutrient}: ${nutritionData.mlPorLitro}ml/L ‚Üí ${quantidade}ml (Rel√© ${nutritionData.relay})`;
            });
            
            alert(alertMessage.trim());
            console.log('‚úÖ Mensagem de confirma√ß√£o exibida');
            communicationMonitor.addLog('success', 'Configura√ß√£o salva e confirmada pelo usu√°rio');
        });
        
        // Feedback visual no bot√£o
        const btn = document.getElementById('save-ec-params');
        if (btn) {
            const originalText = btn.textContent;
            btn.textContent = '‚úÖ Salvo!';
            btn.style.backgroundColor = '#4CAF50';
            
                setTimeout(() => {
                btn.textContent = originalText;
                btn.style.backgroundColor = '';
            }, 2000);
        }
    })
    .catch(error => {
        console.error('‚ùå Erro ao salvar par√¢metros:', error);
        communicationMonitor.addLog('error', `Falha ao salvar no ESP32: ${error.message}`);
        alert(`‚ùå ERRO AO SALVAR PAR√ÇMETROS

Falha na comunica√ß√£o com o ESP32:
${error.message}

Os par√¢metros foram salvos localmente no estado global, mas n√£o foram enviados para o controlador.
Verifique a conex√£o com o ESP32 e tente novamente.`);
    });
}

// Fun√ß√£o centralizada para lidar com mudan√ßas nos inputs
function handleInputChange(event) {
    const element = event.target;
    const value = parseFloat(element.value) || 0;
    const fieldId = element.id;
    const isNutritionInput = element.classList.contains('ml-por-litro');
    
    console.log(`üìù Input alterado: ${fieldId || element.className} = ${value}`);
    
    // Atualizar estado global baseado no tipo de campo
    if (fieldId === 'volume-reservoir') {
        updateState('system', 'volume', value);
    } else if (fieldId === 'flow-rate') {
        updateState('system', 'flowRate', value);
    } else if (fieldId === 'base-dose') {
        updateState('system', 'baseDose', value);
    } else if (fieldId === 'ec-setpoint') {
        updateState('system', 'ecSetpoint', value);
        // Atualizar erro imediatamente para setpoint
        const currentECElement = document.getElementById('ec-value');
        const currentEC = currentECElement ? parseFloat(currentECElement.textContent) || 0 : 0;
        updateECStatus(currentEC);
    } else if (fieldId === 'intervalo-dosagem') {
        updateState('control', 'intervaloBetweenNutrients', parseInt(value));
    } else if (fieldId === 'intervalo-auto-ec') {
        updateState('control', 'intervaloAutoEC', parseInt(value));
    } else if (isNutritionInput) {
        // Para inputs ml-por-litro, encontrar o nutriente
        const row = element.closest('tr[data-nutrient]');
        if (row) {
            const nutrient = row.getAttribute('data-nutrient');
            if (globalState.nutrition[nutrient]) {
                // Atualizar estado do nutriente espec√≠fico
                const oldValue = globalState.nutrition[nutrient].mlPorLitro;
                globalState.nutrition[nutrient].mlPorLitro = value;
                
                console.log(`üß™ Nutriente ${nutrient}: ${oldValue} ‚Üí ${value} ml/L`);
                
                // Recalcular plano nutricional
                calculateNutritionPlan();
                
                // Atualizar equa√ß√£o
                updateEquationDisplay();
            }
        }
    }
}

// Fun√ß√£o para configurar listeners inteligentes baseados no estado global
function setupGlobalStateListeners() {
    console.log('üîß Configurando listeners baseados no estado global...');
    
    // Lista de todos os campos que devem ser monitorados
    const fieldsToMonitor = [
        'volume-reservoir',
        'flow-rate', 
        'base-dose',
        'ec-setpoint',
        'intervalo-dosagem',
        'intervalo-auto-ec'
    ];
    
    // Configurar listeners para campos da se√ß√£o EC
    fieldsToMonitor.forEach(fieldId => {
        const element = document.getElementById(fieldId);
        if (element) {
            // Remover listeners antigos
            element.removeEventListener('input', handleInputChange);
            element.removeEventListener('change', handleInputChange);
            
            // Adicionar novos listeners
            element.addEventListener('input', handleInputChange);
            element.addEventListener('change', handleInputChange);
            
            console.log(`‚úÖ Listener configurado para: ${fieldId}`);
            } else {
            console.warn(`‚ö†Ô∏è Campo n√£o encontrado: ${fieldId}`);
        }
    });
    
    // Configurar listeners para inputs ml-por-litro da tabela nutricional
    document.querySelectorAll('.ml-por-litro').forEach((input, index) => {
        // Remover listeners antigos
        input.removeEventListener('input', handleInputChange);
        input.removeEventListener('change', handleInputChange);
        
        // Adicionar novos listeners
        input.addEventListener('input', handleInputChange);
        input.addEventListener('change', handleInputChange);
        
        const row = input.closest('tr[data-nutrient]');
        const nutrient = row ? row.getAttribute('data-nutrient') : `input-${index}`;
        console.log(`‚úÖ Listener nutricional configurado para: ${nutrient}`);
    });
    
    console.log('üéØ Todos os listeners de estado global configurados!');
}

// Fun√ß√£o para buscar estados dos rel√©s
function fetchRelayStates() {
    console.log('üì° Buscando estados dos rel√©s e criando toggles...');
    
    // Criar toggles dos rel√©s se n√£o existirem
    createRelayToggles();
    
    // Buscar estados atuais dos rel√©s
    fetch('/sensors')
        .then(response => response.json())
        .then(data => {
            if (data.relayStates && Array.isArray(data.relayStates)) {
                console.log('‚úÖ Estados dos rel√©s recebidos:', data.relayStates);
                updateRelayToggles(data.relayStates);
            }
        })
        .catch(error => {
            console.error('‚ùå Erro ao buscar estados dos rel√©s:', error);
        });
}

// ===== FUN√á√ÉO PARA CRIAR TOGGLES DOS REL√âS =====
function createRelayToggles() {
    const buttonsContainer = document.getElementById('buttons');
    if (!buttonsContainer) {
        console.error('‚ùå Container de bot√µes n√£o encontrado');
        return;
    }
    
    // Limpar container se j√° tiver conte√∫do
    buttonsContainer.innerHTML = '';
    
    console.log('üîß Criando toggles dos rel√©s...');
    
    // Criar 8 toggles para os rel√©s
    for (let i = 0; i < 8; i++) {
        const relayNumber = i + 1;
        
        // Container do rel√©
        const relayContainer = document.createElement('div');
        relayContainer.className = 'relay-control';
        relayContainer.id = `relay-${relayNumber}-container`;
        
        // Label do rel√©
        const label = document.createElement('label');
        label.className = 'relay-label';
        label.textContent = `Rel√© ${relayNumber}`;
        
        // Toggle switch
        const toggleContainer = document.createElement('div');
        toggleContainer.className = 'toggle-container';
        
        const toggleSwitch = document.createElement('div');
        toggleSwitch.className = 'toggle-switch';
        toggleSwitch.id = `relay-${relayNumber}-toggle`;
        toggleSwitch.setAttribute('data-relay', relayNumber);
        
        const toggleSlider = document.createElement('div');
        toggleSlider.className = 'toggle-slider';
        
        const toggleButton = document.createElement('div');
        toggleButton.className = 'toggle-button';
        
        // Status text
        const statusText = document.createElement('span');
        statusText.className = 'relay-status';
        statusText.id = `relay-${relayNumber}-status`;
        statusText.textContent = 'OFF';
        
        // Montar estrutura
        toggleSlider.appendChild(toggleButton);
        toggleSwitch.appendChild(toggleSlider);
        toggleContainer.appendChild(toggleSwitch);
        
        relayContainer.appendChild(label);
        relayContainer.appendChild(toggleContainer);
        relayContainer.appendChild(statusText);
        
        // Event listener para o toggle
        toggleSwitch.addEventListener('click', () => {
            const currentState = toggleSwitch.classList.contains('active');
            toggleRelay(i, 0); // Toggle simples
            console.log(`üîÑ Toggle rel√© ${relayNumber}: ${currentState ? 'OFF' : 'ON'}`);
        });
        
        buttonsContainer.appendChild(relayContainer);
    }
    
    console.log('‚úÖ Toggles dos rel√©s criados com sucesso!');
}

// ===== FUN√á√ÉO PARA ATUALIZAR ESTADOS DOS TOGGLES =====
function updateRelayToggles(relayStates) {
    for (let i = 0; i < 8; i++) {
        const relayNumber = i + 1;
        const toggleSwitch = document.getElementById(`relay-${relayNumber}-toggle`);
        const statusText = document.getElementById(`relay-${relayNumber}-status`);
        
        if (toggleSwitch && statusText) {
            const isActive = relayStates[i];
            
            if (isActive) {
                toggleSwitch.classList.add('active');
                statusText.textContent = 'ON';
                statusText.className = 'relay-status active';
            } else {
                toggleSwitch.classList.remove('active');
                statusText.textContent = 'OFF';
                statusText.className = 'relay-status';
            }
        }
    }
}

// ===== FUN√á√ÉO PARA CANCELAR AUTO EC =====
async function handleCancelAutoEC() {
    try {
        console.log('üõë Cancelando Auto EC...');
        
        // Mostrar confirma√ß√£o
        if (!confirm('‚ö†Ô∏è Tem certeza que deseja CANCELAR o Auto EC?\n\nIsso ir√°:\n‚Ä¢ Parar a dosagem em andamento\n‚Ä¢ Desativar o controle autom√°tico\n‚Ä¢ Desligar todos os rel√©s')) {
            return;
        }
        
        const response = await fetch('/cancel-auto-ec', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                action: 'cancel',
                timestamp: Date.now()
            })
        });
        
        if (response.ok) {
            console.log('‚úÖ Auto EC cancelado com sucesso');
            
            // Atualizar interface - desativar Auto EC
            updateState('control', 'autoECEnabled', false);
            
            // Atualizar UI
            updateECControlUI();
            
            // Mostrar notifica√ß√£o
            showNotification('üõë Auto EC Cancelado', 'Sistema parado e controle autom√°tico desativado', 'warning');
            
        } else {
            console.error('‚ùå Falha ao cancelar Auto EC:', response.status);
            showNotification('‚ùå Erro', 'Falha ao cancelar Auto EC', 'error');
        }
    } catch (error) {
        console.error('‚ùå Erro ao cancelar Auto EC:', error);
        showNotification('‚ùå Erro de Conex√£o', 'N√£o foi poss√≠vel cancelar o Auto EC', 'error');
    }
}

// ===== üö® FUN√á√ÉO PARA RESET EMERGENCIAL TOTAL =====
async function handleEmergencyReset() {
    try {
        console.log('üö® INICIANDO RESET EMERGENCIAL...');
        
        // Confirma√ß√£o dupla para emerg√™ncia
        if (!confirm('üö® ATEN√á√ÉO - RESET EMERGENCIAL TOTAL! üö®\n\n‚ö†Ô∏è Esta a√ß√£o ir√° PARAR TUDO IMEDIATAMENTE:\n\n‚Ä¢ Todos os 8 rel√©s ser√£o DESLIGADOS\n‚Ä¢ Auto EC ser√° DESATIVADO\n‚Ä¢ Dosagem em curso ser√° CANCELADA\n‚Ä¢ Todos os estados ser√£o RESETADOS\n‚Ä¢ Sistema voltar√° ao estado IDLE\n\nüö® TEM CERTEZA ABSOLUTA?')) {
            return;
        }
        
        // Segunda confirma√ß√£o para emerg√™ncia cr√≠tica
        if (!confirm('üö® CONFIRMA√á√ÉO FINAL üö®\n\nEsta √© uma EMERG√äNCIA TOTAL que vai PARAR TODO O SISTEMA.\n\nAperte OK apenas se for uma EMERG√äNCIA REAL.\n\n‚ö†Ô∏è CONTINUAR?')) {
            return;
        }
        
        console.log('üö® Executando RESET EMERGENCIAL TOTAL...');
        
        // Enviar comando de emerg√™ncia
        const response = await fetch('/emergency-reset', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                action: 'emergency-reset-total',
                timestamp: Date.now(),
                source: 'web-interface'
            })
        });
        
        if (response.ok) {
            console.log('‚úÖ RESET EMERGENCIAL executado com sucesso');
            
            // RESETAR INTERFACE COMPLETAMENTE
            // 1. Resetar Auto EC
            updateState('control', 'autoECEnabled', false);
            updateState('control', 'lastDosage', 0);
            updateState('control', 'currentECValue', 0);
            
            // 2. Resetar todos os par√¢metros
            updateState('system', 'ecSetpoint', 0);
            
            // 3. Atualizar todas as interfaces
            updateECControlUI();
            
            // 4. Mostrar notifica√ß√£o de emerg√™ncia
            alert('üö® RESET EMERGENCIAL EXECUTADO! üö®\n\n‚úÖ SISTEMA TOTALMENTE PARADO:\n\n‚Ä¢ Todos os rel√©s: DESLIGADOS\n‚Ä¢ Auto EC: DESATIVADO\n‚Ä¢ Dosagem: CANCELADA\n‚Ä¢ Estados: RESETADOS\n‚Ä¢ Status: IDLE SEGURO\n\nüü¢ Sistema pronto para nova configura√ß√£o');
            
            // 5. Log no monitor de comunica√ß√£o
            communicationMonitor.addLog('emergency', 'üö® RESET EMERGENCIAL TOTAL executado com sucesso');
            
        } else {
            const errorText = await response.text();
            console.error('‚ùå Falha no RESET EMERGENCIAL:', response.status, errorText);
            alert('‚ùå FALHA NO RESET EMERGENCIAL!\n\nErro: ' + response.status + '\n\nTente novamente ou use o bot√£o f√≠sico de emerg√™ncia.');
        }
        
    } catch (error) {
        console.error('‚ùå Erro cr√≠tico no RESET EMERGENCIAL:', error);
        alert('‚ùå ERRO CR√çTICO!\n\nN√£o foi poss√≠vel executar o RESET EMERGENCIAL.\n\nUSE O BOT√ÉO F√çSICO DE EMERG√äNCIA ou reinicie o ESP32 manualmente!');
        
        // Log cr√≠tico
        communicationMonitor.addLog('error', 'üö® FALHA CR√çTICA no Reset Emergencial: ' + error.message);
    }
}

// Fun√ß√£o para mostrar notifica√ß√µes (se n√£o existir)
function showNotification(title, message, type = 'info') {
    // Implementa√ß√£o simples com alert por enquanto
    alert(`${title}\n\n${message}`);
}

async function handleToggleAutoEC() {
    const button = document.getElementById('toggle-auto-ec');
    const statusSpan = document.getElementById('auto-ec-status');
    const currentEnabled = globalState.control.autoECEnabled;
    
    if (!button || !statusSpan) {
        console.error('‚ùå Elementos do Auto EC n√£o encontrados');
        communicationMonitor.addLog('error', 'Elementos UI do Auto EC n√£o encontrados');
        return;
    }
    
    if (!currentEnabled) {
        // ===== VALIDA√á√ÉO ANTES DE ATIVAR AUTO EC =====
        const validationResult = validateECParameters();
        if (!validationResult.valid) {
            showParameterValidationAlert(validationResult.errors);
            return; // N√£o ativar se houver erros
        }
        
        // ===== MOSTRAR CONFIRMA√á√ÉO DETALHADA =====
        const confirmationResult = await showAutoECConfirmation();
        if (!confirmationResult) {
            return; // Usu√°rio cancelou
        }
    }
    
    // Alternar estado
    const newState = !currentEnabled;
    updateState('control', 'autoECEnabled', newState);
    
    // Preparar dados para envio
    const data = {
        setpoint: globalState.system.ecSetpoint,
        autoEnabled: newState
    };
    
    console.log(`üéõÔ∏è Alterando Auto EC para: ${newState ? 'ATIVO' : 'INATIVO'}`);
    communicationMonitor.addLog('info', `Alterando Auto EC para: ${newState ? 'ATIVO' : 'INATIVO'}`);
    
    // Enviar para ESP32
    fetch('/ec-control', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Falha ao alterar controle Auto EC');
        }
        
        // Atualizar interface
        updateECControlUI();
        
        console.log(`‚úÖ Auto EC ${newState ? 'ativado' : 'desativado'} com sucesso`);
        communicationMonitor.addLog('success', `Auto EC ${newState ? 'ativado' : 'desativado'} no ESP32`);
        
        // Log adicional com setpoint
        communicationMonitor.addLog('data', `Setpoint configurado: ${globalState.system.ecSetpoint}¬µS/cm`);
    })
    .catch(error => {
        console.error('‚ùå Erro ao alterar Auto EC:', error);
        communicationMonitor.addLog('error', `Falha ao alterar Auto EC: ${error.message}`);
        alert(`Erro ao alterar controle autom√°tico: ${error.message}`);
        
        // Reverter estado em caso de erro
        updateState('control', 'autoECEnabled', !newState);
    });
}

// ===== NOVAS FUN√á√ïES DOS BOT√ïES LIMPAR VALORES =====

// Fun√ß√£o para limpar todos os valores da se√ß√£o Controle Autom√°tico de EC
function handleClearECValues() {
    console.log('üóëÔ∏è Limpando valores do Controle Autom√°tico de EC...');
    
    if (confirm('üóëÔ∏è LIMPAR VALORES - CONTROLE AUTOM√ÅTICO DE EC\n\n‚ö†Ô∏è Esta a√ß√£o ir√°:\n‚Ä¢ Limpar todos os campos da se√ß√£o EC\n‚Ä¢ Resetar o estado global do sistema\n‚Ä¢ Desativar o controle autom√°tico\n\n‚ö†Ô∏è Deseja continuar?')) {
        
        // Limpar campos da interface
        const ecFields = [
            'base-dose',
            'flow-rate', 
            'volume-reservoir',
            'total-ml',
            'ec-setpoint',
            'intervalo-auto-ec'
        ];
        
        ecFields.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            if (field) {
                field.value = '';
                console.log(`‚úÖ Campo limpo: ${fieldId}`);
            }
        });
        
        // Resetar estado global - se√ß√£o system
        updateState('system', 'volume', 0);
        updateState('system', 'flowRate', 0);
        updateState('system', 'baseDose', 0);
        updateState('system', 'ecSetpoint', 0);
        updateState('system', 'totalMlPorLitro', 0);
        
        // Resetar estado global - se√ß√£o control
        updateState('control', 'autoECEnabled', false);
        updateState('control', 'intervaloAutoEC', 0);
        updateState('control', 'lastDosage', 0);
        updateState('control', 'currentECValue', 0);
        
        // Resetar par√¢metros salvos
        savedECParameters = {
            baseDose: 0,
            flowRate: 0,
            volume: 0,
            totalMlPorLitro: 0,
            setpoint: 0,
            timestamp: null
        };
        
        // Limpar localStorage
        localStorage.removeItem('hydroponicECParameters');
        
        // Atualizar interface Auto EC
        updateECControlUI();
        
        // Limpar exibi√ß√£o da equa√ß√£o
        document.getElementById('eq-volume').textContent = '0 L';
        document.getElementById('eq-k-value').textContent = '0.000';
        document.getElementById('eq-flow-rate').textContent = '0 ml/s';
        document.getElementById('eq-error').textContent = '-- ¬µS/cm';
        document.getElementById('eq-result').textContent = '-- ml';
        document.getElementById('eq-time').textContent = '-- segundos';
        
        // Atualizar indicador do controller
        const indicator = document.getElementById('controller-indicator');
        if (indicator) {
            indicator.textContent = 'üîÑ Par√¢metros EC vazios - Configure para conectar';
            indicator.className = 'controller-status-text loading';
        }
        
        // Log de monitoramento
        communicationMonitor.addLog('info', 'üóëÔ∏è Valores do Controle EC limpos com sucesso');
        
        console.log('‚úÖ Valores do Controle Autom√°tico de EC limpos com sucesso!');
        alert('‚úÖ VALORES LIMPOS COM SUCESSO!\n\nüßπ Controle Autom√°tico de EC:\n‚Ä¢ Todos os campos foram limpos\n‚Ä¢ Estado global resetado\n‚Ä¢ Auto EC desativado\n‚Ä¢ Par√¢metros salvos removidos\n\nüí° Configure novos valores para reativar o sistema.');
    } else {
        console.log('‚ùå Limpeza cancelada pelo usu√°rio');
    }
}

// Fun√ß√£o para limpar todos os valores do Plano Nutricional
function handleClearNutritionPlan() {
    console.log('üóëÔ∏è Limpando valores do Plano Nutricional...');
    
    if (confirm('üóëÔ∏è LIMPAR PLANO NUTRICIONAL\n\n‚ö†Ô∏è Esta a√ß√£o ir√°:\n‚Ä¢ Limpar todos os valores ml/L dos nutrientes\n‚Ä¢ Resetar quantidades e tempos calculados\n‚Ä¢ Limpar intervalo entre nutrientes\n‚Ä¢ Resetar o estado global da nutri√ß√£o\n\n‚ö†Ô∏è Deseja continuar?')) {
        
        // Limpar todos os inputs ml-por-litro
        const nutritionInputs = document.querySelectorAll('.ml-por-litro');
        nutritionInputs.forEach((input, index) => {
            input.value = '';
            console.log(`‚úÖ Input nutricional ${index + 1} limpo`);
        });
        
        // Limpar campo intervalo entre nutrientes
        const intervalField = document.getElementById('intervalo-dosagem');
        if (intervalField) {
            intervalField.value = '';
            console.log('‚úÖ Campo intervalo dosagem limpo');
        }
        
        // Resetar estado global - se√ß√£o nutrition
        Object.keys(globalState.nutrition).forEach(nutrient => {
            updateState('nutrition', nutrient, { mlPorLitro: 0, relay: globalState.nutrition[nutrient].relay });
        });
        
        // Resetar estado global - se√ß√£o control
        updateState('control', 'intervaloBetweenNutrients', 0);
        
        // Atualizar quantidades e tempos calculados na tabela
        const quantidadeCells = document.querySelectorAll('.quantidade');
        const tempoCells = document.querySelectorAll('.tempo');
        
        quantidadeCells.forEach(cell => {
            cell.textContent = '0.0';
        });
        
        tempoCells.forEach(cell => {
            cell.textContent = '0.0';
        });
        
        // Resetar tempo total
        const tempoTotalElement = document.getElementById('tempo-total');
        if (tempoTotalElement) {
            tempoTotalElement.textContent = '0 segundos';
        }
        
        // Recalcular plano nutricional (que agora ser√° zero)
        calculateNutritionPlan();
        
        // Atualizar equa√ß√£o (se os par√¢metros EC estiverem configurados)
        updateEquationDisplay();
        
        // Log de monitoramento
        communicationMonitor.addLog('info', 'üóëÔ∏è Plano nutricional limpo com sucesso');
        
        console.log('‚úÖ Plano Nutricional limpo com sucesso!');
        alert('‚úÖ PLANO NUTRICIONAL LIMPO!\n\nüßπ Plano Nutricional:\n‚Ä¢ Todos os valores ml/L zerados\n‚Ä¢ Quantidades e tempos resetados\n‚Ä¢ Intervalo entre nutrientes limpo\n‚Ä¢ Estado global da nutri√ß√£o resetado\n\nüí° Configure novos valores para definir seu plano nutricional.');
    } else {
        console.log('‚ùå Limpeza cancelada pelo usu√°rio');
    }
}

// ===== FUN√á√ÉO DE SIMULA√á√ÉO DA ACCURACY =====
function simularAccuracy(ecSetpoint, ecAtual, volume, flowRate, baseDose, totalMlPorLitro) {
    console.log('\nüß™ ===== SIMULA√á√ÉO DE ACCURACY =====');
    console.log(`üìä Par√¢metros de entrada:`);
    console.log(`   ‚Ä¢ EC Setpoint: ${ecSetpoint} ¬µS/cm`);
    console.log(`   ‚Ä¢ EC Atual: ${ecAtual} ¬µS/cm`);
    console.log(`   ‚Ä¢ Volume: ${volume} L`);
    console.log(`   ‚Ä¢ Flow Rate: ${flowRate} ml/s`);
    console.log(`   ‚Ä¢ Base Dose: ${baseDose} ¬µS/cm`);
    console.log(`   ‚Ä¢ Total ml/L: ${totalMlPorLitro} ml/L`);
    
    // Calcular par√¢metros
    const k = totalMlPorLitro > 0 ? baseDose / totalMlPorLitro : 0;
    const error = ecSetpoint - ecAtual;
    const Kp = 1.0;
    
    console.log(`\nüîß C√°lculos intermedi√°rios:`);
    console.log(`   ‚Ä¢ k = ${baseDose}/${totalMlPorLitro} = ${k.toFixed(3)}`);
    console.log(`   ‚Ä¢ error = ${ecSetpoint} - ${ecAtual} = ${error.toFixed(1)} ¬µS/cm`);
    console.log(`   ‚Ä¢ Kp = ${Kp}`);
    
    // Calcular A (incremento de accuracy)
    const A = (k * flowRate * error) / (volume * 1000);
    
    console.log(`\n‚ö° C√°lculo de A:`);
    console.log(`   ‚Ä¢ A = (k √ó flowRate √ó error) / (volume √ó 1000)`);
    console.log(`   ‚Ä¢ A = (${k.toFixed(3)} √ó ${flowRate} √ó ${error.toFixed(1)}) / (${volume} √ó 1000)`);
    console.log(`   ‚Ä¢ A = ${A.toFixed(6)} ¬µS/cm`);
    
    // NOVA F√ìRMULA: EC(‚àû) = EC(0) + A √ó Kp √ó error
    const ecFinalPrevisto = ecAtual + A * Kp * error;
    
    console.log(`\nüéØ NOVA F√ìRMULA DE ACCURACY:`);
    console.log(`   ‚Ä¢ EC(‚àû) = EC(0) + A √ó Kp √ó error`);
    console.log(`   ‚Ä¢ EC(‚àû) = ${ecAtual} + ${A.toFixed(6)} √ó ${Kp} √ó ${error.toFixed(1)}`);
    console.log(`   ‚Ä¢ EC(‚àû) = ${ecAtual} + ${(A * Kp * error).toFixed(2)}`);
    console.log(`   ‚Ä¢ EC(‚àû) = ${ecFinalPrevisto.toFixed(1)} ¬µS/cm`);
    
    const incrementoTotal = ecFinalPrevisto - ecAtual;
    console.log(`\nüìà Resultado final:`);
    console.log(`   ‚Ä¢ Incremento total: ${incrementoTotal.toFixed(2)} ¬µS/cm`);
    console.log(`   ‚Ä¢ EC inicial: ${ecAtual} ¬µS/cm`);
    console.log(`   ‚Ä¢ EC final previsto: ${ecFinalPrevisto.toFixed(1)} ¬µS/cm`);
    console.log(`   ‚Ä¢ Diferen√ßa do setpoint: ${Math.abs(ecFinalPrevisto - ecSetpoint).toFixed(1)} ¬µS/cm`);
    
    console.log('üß™ ===== FIM DA SIMULA√á√ÉO =====\n');
    
    return {
        A: A,
        ecFinalPrevisto: ecFinalPrevisto,
        incrementoTotal: incrementoTotal,
        k: k,
        error: error
    };
}

// ===== FUN√á√ÉO PARA ATUALIZAR SE√á√ÉO DE ACCURACY =====
function updateAccuracySection(A, ecAtual, ecFinalPrevisto) {
    const accuracyValueElement = document.getElementById('accuracy-value');
    const ecAtualDisplayElement = document.getElementById('ec-atual-display');
    const accuracyGainElement = document.getElementById('accuracy-gain');
    const ecFinalPrevistoElement = document.getElementById('ec-final-previsto');
    
    // Atualizar valores individuais com verifica√ß√£o robusta
    if (accuracyValueElement) accuracyValueElement.textContent = `${A.toFixed(2)} ¬µS/cm`;
    if (accuracyGainElement) accuracyGainElement.textContent = `${A.toFixed(2)}`;
    if (ecAtualDisplayElement) ecAtualDisplayElement.textContent = `${ecAtual.toFixed(1)}`;
    if (ecFinalPrevistoElement) ecFinalPrevistoElement.textContent = `${ecFinalPrevisto.toFixed(1)} ¬µS/cm`;
    
    // Destacar valores significativos na accuracy
    if (Math.abs(A) > 20) { // Threshold para accuracy significativa
        if (accuracyValueElement) accuracyValueElement.classList.add('highlight');
        if (accuracyGainElement) accuracyGainElement.classList.add('highlight');
    } else {
        if (accuracyValueElement) accuracyValueElement.classList.remove('highlight');
        if (accuracyGainElement) accuracyGainElement.classList.remove('highlight');
    }
    
    // Destacar EC final se diferen√ßa for significativa
    const diferencaEC = Math.abs(ecFinalPrevisto - ecAtual);
    if (diferencaEC > 50) { // Threshold para mudan√ßa significativa de EC
        if (ecFinalPrevistoElement) ecFinalPrevistoElement.classList.add('highlight');
    } else {
        if (ecFinalPrevistoElement) ecFinalPrevistoElement.classList.remove('highlight');
    }
    
    console.log(`üìà ACCURACY ATUALIZADA: A=${A.toFixed(2)}, EC atual=${ecAtual.toFixed(1)}, EC(‚àû)=${ecFinalPrevisto.toFixed(1)}`);
}

// ===== SISTEMA DE TIMERS DE REL√âS EM TEMPO REAL ===== //

const RelayTimerSystem = {
    // Estado do sistema
    state: {
        activeTimers: new Map(),
        sequence: [],
        currentIndex: 0,
        totalDuration: 0,
        startTime: null,
        isRunning: false,
        completedNutrients: 0
    },
    
    // Configura√ß√µes
    config: {
        updateInterval: 100, // Atualiza√ß√£o a cada 100ms para precis√£o
        soundEnabled: true,
        showProgressBars: true
    },
    
    // Inicializar sistema
    init() {
        console.log('‚è±Ô∏è Inicializando sistema de timers em tempo real...');
        this.setupEventListeners();
        this.hideTimerSection();
        console.log('‚úÖ Sistema de timers iniciado');
    },
    
    // Event listeners
    setupEventListeners() {
        // Interceptar execu√ß√£o de dosagem proporcional
        const originalExecute = window.executarDosagemProporcional;
        if (originalExecute) {
            window.executarDosagemProporcional = (totalUt) => {
                // Preparar timers antes da execu√ß√£o
                this.prepareDosageTimers(totalUt);
                // Chamar fun√ß√£o original
                originalExecute(totalUt);
            };
        }
    },
    
    // Preparar timers para dosagem
    prepareDosageTimers(totalUt) {
        console.log('üéØ Preparando timers para dosagem proporcional...');
        
        // Calcular distribui√ß√£o usando fun√ß√£o existente
        const distribution = calculateProportionalDistribution(totalUt);
        const intervalo = globalState.control.intervaloBetweenNutrients;
        
        if (distribution.length === 0) {
            console.warn('‚ö†Ô∏è Nenhum nutriente para dosagem');
            return;
        }
        
        // Criar sequ√™ncia de timers
        this.state.sequence = distribution.map((item, index) => ({
            id: `timer-${item.relay}`,
            nutrientName: item.nutriente,
            relay: item.relay,
            duration: item.tempoDosagem, // tempo em segundos
            volume: item.utNutriente, // volume em ml
            startDelay: index * (intervalo * 1000), // delay em ms
            status: 'waiting'
        }));
        
        // Calcular dura√ß√£o total
        this.state.totalDuration = this.state.sequence.reduce((total, timer) => {
            return Math.max(total, timer.startDelay + (timer.duration * 1000));
        }, 0);
        
        console.log(`üìä Sequ√™ncia preparada: ${this.state.sequence.length} nutrientes, dura√ß√£o total: ${(this.state.totalDuration/1000).toFixed(1)}s`);
        
        // Mostrar se√ß√£o e criar timers visuais
        this.showTimerSection();
        this.createTimerElements();
        this.updateProgressStats();
        
        // Aguardar 2 segundos e iniciar
        setTimeout(() => {
            this.startTimerSequence();
        }, 2000);
    },
    
    // Mostrar se√ß√£o de timers
    showTimerSection() {
        const section = document.getElementById('relay-timers-section');
        if (section) {
            section.style.display = 'block';
            section.scrollIntoView({ behavior: 'smooth', block: 'center' });
            
            // Efeito de fade in
            section.style.opacity = '0';
            section.style.transform = 'translateY(20px)';
            
            setTimeout(() => {
                section.style.transition = 'all 0.5s ease';
                section.style.opacity = '1';
                section.style.transform = 'translateY(0)';
            }, 100);
        }
    },
    
    // Esconder se√ß√£o de timers
    hideTimerSection() {
        const section = document.getElementById('relay-timers-section');
        if (section) {
            section.style.display = 'none';
        }
    },
    
    // Criar elementos visuais dos timers
    createTimerElements() {
        const container = document.getElementById('timers-container');
        if (!container) return;
        
        container.innerHTML = '';
        
        this.state.sequence.forEach((timer, index) => {
            const timerElement = this.createTimerElement(timer, index);
            container.appendChild(timerElement);
        });
        
        console.log(`üé® Criados ${this.state.sequence.length} elementos de timer`);
    },
    
    // Criar elemento individual do timer
    createTimerElement(timer, index) {
        const div = document.createElement('div');
        div.className = 'relay-timer waiting';
        div.id = timer.id;
        
        div.innerHTML = `
            <div class="timer-header">
                <h3 class="nutrient-name">${timer.nutrientName}</h3>
                <span class="relay-number">Rel√© ${timer.relay}</span>
            </div>
            
            <div class="timer-display">
                <span class="timer-value" id="${timer.id}-value">${timer.duration.toFixed(1)}</span>
                <span class="timer-unit">s</span>
            </div>
            
            <div class="timer-progress">
                <div class="timer-progress-fill" id="${timer.id}-progress"></div>
            </div>
            
            <div class="timer-details">
                <div class="timer-info">
                    <div>Volume: ${timer.volume.toFixed(2)} ml</div>
                    <div>In√≠cio em: ${(timer.startDelay/1000).toFixed(1)}s</div>
                </div>
                <span class="timer-status waiting" id="${timer.id}-status">Aguardando</span>
            </div>
        `;
        
        return div;
    },
    
    // Iniciar sequ√™ncia de timers
    startTimerSequence() {
        if (this.state.isRunning) {
            console.warn('‚ö†Ô∏è Sequ√™ncia j√° est√° rodando');
            return;
        }
        
        console.log('üöÄ Iniciando sequ√™ncia de timers em tempo real!');
        
        this.state.isRunning = true;
        this.state.startTime = Date.now();
        this.state.currentIndex = 0;
        this.state.completedNutrients = 0;
        
        // Resetar todos os timers
        this.state.activeTimers.clear();
        
        // Programar cada timer
        this.state.sequence.forEach((timer, index) => {
            // Timer para iniciar dosagem
            setTimeout(() => {
                this.startIndividualTimer(timer);
            }, timer.startDelay);
            
            // Timer para finalizar dosagem
            setTimeout(() => {
                this.completeIndividualTimer(timer);
            }, timer.startDelay + (timer.duration * 1000));
        });
        
        // Timer para finalizar sequ√™ncia completa
        setTimeout(() => {
            this.completeSequence();
        }, this.state.totalDuration + 1000);
        
        // Iniciar loop de atualiza√ß√£o
        this.startUpdateLoop();
        
        // Log e notifica√ß√£o
        communicationMonitor.addLog('success', `Timers iniciados: ${this.state.sequence.length} nutrientes em sequ√™ncia`);
        
        // Tocar som de in√≠cio (se habilitado)
        this.playSound('start');
    },
    
    // Iniciar timer individual
    startIndividualTimer(timer) {
        console.log(`‚ñ∂Ô∏è Iniciando timer: ${timer.nutrientName} (Rel√© ${timer.relay}) - ${timer.duration.toFixed(1)}s`);
        
        // Atualizar estado do timer
        timer.status = 'active';
        timer.realStartTime = Date.now();
        
        // Adicionar ao mapa de timers ativos
        this.state.activeTimers.set(timer.id, timer);
        
        // Atualizar UI
        this.updateTimerUI(timer, 'active');
        
        // Log
        communicationMonitor.addLog('data', `‚ñ∂Ô∏è REL√â ${timer.relay} ATIVADO: ${timer.nutrientName} por ${timer.duration.toFixed(1)}s`);
        
        // Som de ativa√ß√£o
        this.playSound('relay_start');
    },
    
    // Completar timer individual
    completeIndividualTimer(timer) {
        console.log(`‚úÖ Completando timer: ${timer.nutrientName} (Rel√© ${timer.relay})`);
        
        // Atualizar estado
        timer.status = 'completed';
        this.state.completedNutrients++;
        
        // Remover dos timers ativos
        this.state.activeTimers.delete(timer.id);
        
        // Atualizar UI
        this.updateTimerUI(timer, 'completed');
        this.updateProgressStats();
        
        // Log
        communicationMonitor.addLog('success', `‚úÖ REL√â ${timer.relay} FINALIZADO: ${timer.nutrientName} - ${timer.volume.toFixed(2)}ml dosados`);
        
        // Som de finaliza√ß√£o
        this.playSound('relay_complete');
    },
    
    // Atualizar UI do timer
    updateTimerUI(timer, status) {
        const timerElement = document.getElementById(timer.id);
        const valueElement = document.getElementById(`${timer.id}-value`);
        const progressElement = document.getElementById(`${timer.id}-progress`);
        const statusElement = document.getElementById(`${timer.id}-status`);
        
        if (!timerElement) return;
        
        // Atualizar classe CSS
        timerElement.className = `relay-timer ${status}`;
        
        // Atualizar status text
        if (statusElement) {
            statusElement.className = `timer-status ${status}`;
            statusElement.textContent = this.getStatusText(status);
        }
        
        // Se for ativo, adicionar classe de countdown
        if (status === 'active' && valueElement) {
            valueElement.classList.add('countdown');
        } else if (valueElement) {
            valueElement.classList.remove('countdown');
        }
        
        // Atualizar progresso inicial
        if (progressElement) {
            if (status === 'completed') {
                progressElement.style.width = '100%';
            } else if (status === 'active') {
                progressElement.style.width = '0%';
            }
        }
    },
    
    // Obter texto do status
    getStatusText(status) {
        const statusTexts = {
            'waiting': 'Aguardando',
            'active': 'Dosando',
            'completed': 'Conclu√≠do',
            'error': 'Erro'
        };
        return statusTexts[status] || 'Desconhecido';
    },
    
    // Loop de atualiza√ß√£o em tempo real
    startUpdateLoop() {
        const updateInterval = setInterval(() => {
            if (!this.state.isRunning) {
                clearInterval(updateInterval);
                return;
            }
            
            const now = Date.now();
            const elapsedTotal = now - this.state.startTime;
            
            // Atualizar cada timer ativo
            this.state.activeTimers.forEach((timer) => {
                this.updateActiveTimer(timer, now);
            });
            
            // Atualizar progresso geral
            this.updateOverallProgress(elapsedTotal);
            
        }, this.config.updateInterval);
    },
    
    // Atualizar timer ativo
    updateActiveTimer(timer, now) {
        if (!timer.realStartTime) return;
        
        const elapsed = now - timer.realStartTime;
        const remaining = Math.max(0, (timer.duration * 1000) - elapsed);
        const progress = Math.min(100, (elapsed / (timer.duration * 1000)) * 100);
        
        // Atualizar valor
        const valueElement = document.getElementById(`${timer.id}-value`);
        if (valueElement) {
            valueElement.textContent = (remaining / 1000).toFixed(1);
        }
        
        // Atualizar barra de progresso
        const progressElement = document.getElementById(`${timer.id}-progress`);
        if (progressElement) {
            progressElement.style.width = `${progress}%`;
        }
    },
    
    // Atualizar progresso geral
    updateOverallProgress(elapsedTotal) {
        const progressFill = document.getElementById('overall-progress-fill');
        const progressText = document.getElementById('overall-progress-text');
        const remainingNutrients = document.getElementById('remaining-nutrients');
        const totalEstimatedTime = document.getElementById('total-estimated-time');
        
        if (progressFill && progressText) {
            const overallProgress = Math.min(100, (elapsedTotal / this.state.totalDuration) * 100);
            progressFill.style.width = `${overallProgress}%`;
            progressText.textContent = `${overallProgress.toFixed(0)}% Conclu√≠do`;
        }
        
        if (remainingNutrients) {
            const remaining = this.state.sequence.length - this.state.completedNutrients;
            remainingNutrients.textContent = remaining;
        }
        
        if (totalEstimatedTime) {
            const remainingTime = Math.max(0, this.state.totalDuration - elapsedTotal);
            totalEstimatedTime.textContent = `${(remainingTime/1000).toFixed(0)}s`;
        }
    },
    
    // Atualizar estat√≠sticas de progresso
    updateProgressStats() {
        const remainingNutrients = document.getElementById('remaining-nutrients');
        const totalEstimatedTime = document.getElementById('total-estimated-time');
        
        if (remainingNutrients) {
            const remaining = this.state.sequence.length - this.state.completedNutrients;
            remainingNutrients.textContent = remaining;
        }
        
        if (totalEstimatedTime) {
            totalEstimatedTime.textContent = `${(this.state.totalDuration/1000).toFixed(0)}s`;
        }
    },
    
    // Completar sequ√™ncia
    completeSequence() {
        console.log('üéâ Sequ√™ncia de dosagem completada!');
        
        this.state.isRunning = false;
        
        // Atualizar progresso final
        const progressFill = document.getElementById('overall-progress-fill');
        const progressText = document.getElementById('overall-progress-text');
        
        if (progressFill && progressText) {
            progressFill.style.width = '100%';
            progressText.textContent = '100% Conclu√≠do';
        }
        
        // Log final
        communicationMonitor.addLog('success', `üéâ DOSAGEM COMPLETA: ${this.state.completedNutrients}/${this.state.sequence.length} nutrientes processados`);
        
        // Som de finaliza√ß√£o
        this.playSound('sequence_complete');
        
        // Auto-ocultar ap√≥s 10 segundos
        setTimeout(() => {
            this.hideTimerSection();
        }, 10000);
        
        // Notifica√ß√£o visual
        this.showCompletionNotification();
    },
    
    // Mostrar notifica√ß√£o de conclus√£o
    showCompletionNotification() {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #4CAF50, #8BC34A);
            color: white;
            padding: 20px 30px;
            border-radius: 10px;
            font-size: 18px;
            font-weight: bold;
            z-index: 10000;
            box-shadow: 0 4px 20px rgba(76, 175, 80, 0.4);
            animation: slideInRight 0.5s ease;
        `;
        
        notification.innerHTML = `
            üéâ <strong>DOSAGEM COMPLETA!</strong><br>
            <small>${this.state.completedNutrients} nutrientes processados com sucesso</small>
        `;
        
        document.body.appendChild(notification);
        
        // Remover ap√≥s 5 segundos
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.5s ease';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 500);
        }, 5000);
    },
    
    // Tocar sons (simulado - pode ser expandido)
    playSound(type) {
        if (!this.config.soundEnabled) return;
        
        console.log(`üîä Som: ${type}`);
        
        // Aqui poderia implementar sons reais usando Web Audio API
        // Por enquanto, apenas log para debugar
        const soundMessages = {
            'start': 'üéµ Som de in√≠cio da sequ√™ncia',
            'relay_start': 'üîä Som de ativa√ß√£o do rel√©',
            'relay_complete': '‚úÖ Som de finaliza√ß√£o do rel√©',
            'sequence_complete': 'üéâ Som de conclus√£o da sequ√™ncia'
        };
        
        communicationMonitor.addLog('info', soundMessages[type] || `üîä Som: ${type}`);
    },
    
    // Parar sistema de emerg√™ncia
    emergencyStop() {
        console.log('üõë PARADA DE EMERG√äNCIA dos timers!');
        
        this.state.isRunning = false;
        this.state.activeTimers.clear();
        
        // Atualizar todos os timers para erro
        this.state.sequence.forEach(timer => {
            if (timer.status === 'active' || timer.status === 'waiting') {
                timer.status = 'error';
                this.updateTimerUI(timer, 'error');
            }
        });
        
        communicationMonitor.addLog('error', 'üõë PARADA DE EMERG√äNCIA ativada - todos os timers interrompidos');
    }
};

// Inicializar sistema de timers quando DOM estiver pronto
document.addEventListener('DOMContentLoaded', function() {
    // Aguardar um pouco para garantir que outros sistemas estejam prontos
    setTimeout(() => {
        RelayTimerSystem.init();
    }, 1000);
});

// Adicionar sistema de timers ao escopo global para debugging
window.RelayTimerSystem = RelayTimerSystem;

// ===== FUN√á√ÉO PARA ENVIAR PROPOR√á√ïES AO ESP32 =====
async function sendNutrientProportionsToESP32(distribution) {
    try {
        // Extrair propor√ß√µes dos nutrientes
        const proportions = {
            grow: 0,
            micro: 0,
            bloom: 0,
            calmag: 0
        };
        
        // Mapear distribui√ß√£o para propor√ß√µes
        distribution.forEach(item => {
            const name = item.nutriente.toLowerCase();
            if (proportions.hasOwnProperty(name)) {
                proportions[name] = item.proporcao;
            }
        });
        
        console.log('üì§ Enviando propor√ß√µes para ESP32:', proportions);
        
        const response = await fetch('/nutrient-proportions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(proportions)
        });
        
        if (response.ok) {
            console.log('‚úÖ Propor√ß√µes enviadas com sucesso ao ESP32');
        } else {
            console.warn('‚ö†Ô∏è Falha ao enviar propor√ß√µes:', response.status);
        }
    } catch (error) {
        console.error('‚ùå Erro ao enviar propor√ß√µes ao ESP32:', error);
    }
}

// Atualizar fun√ß√£o updateECControlUI para usar estado global
function updateECControlUI() {
    const button = document.getElementById('toggle-auto-ec');
    const statusSpan = document.getElementById('auto-ec-status');
    const cancelRow = document.getElementById('cancel-auto-ec-row');
    
    if (!button || !statusSpan) {
        console.warn('‚ö†Ô∏è Elementos da interface Auto EC n√£o encontrados');
        return;
    }
    
    const isEnabled = globalState.control.autoECEnabled;
    
    if (isEnabled) {
        button.textContent = 'ü§ñ Desativar Auto EC';
        button.classList.add('active');
        statusSpan.textContent = 'Ativo';
        statusSpan.className = 'status-value active';
        
        // Mostrar bot√£o de cancelar quando ativo
        if (cancelRow) {
            cancelRow.style.display = 'block';
        }
    } else {
        button.textContent = 'ü§ñ Ativar Auto EC';
        button.classList.remove('active');
        statusSpan.textContent = 'Desativado';
        statusSpan.className = 'status-value';
        
        // Esconder bot√£o de cancelar quando inativo
        if (cancelRow) {
            cancelRow.style.display = 'none';
        }
    }
}

// ===== FUN√á√ÉO DE VALIDA√á√ÉO DE PAR√ÇMETROS EC =====
function validateECParameters() {
    const errors = [];
    
    // Verificar campos obrigat√≥rios
    const baseDose = parseFloat(document.getElementById('base-dose').value) || 0;
    const flowRate = parseFloat(document.getElementById('flow-rate').value) || 0;
    const volume = parseFloat(document.getElementById('volume-reservoir').value) || 0;
    const ecSetpoint = parseFloat(document.getElementById('ec-setpoint').value) || 0;
    const totalMl = parseFloat(document.getElementById('total-ml').value) || 0;
    
    // Validar cada campo
    if (baseDose <= 0) {
        errors.push('‚Ä¢ Base de dose (EC ¬µS/cm) deve ser maior que 0');
    }
    
    if (flowRate <= 0) {
        errors.push('‚Ä¢ Taxa de vaz√£o perist√°ltica deve ser maior que 0');
    }
    
    if (volume <= 0) {
        errors.push('‚Ä¢ Volume do reservat√≥rio deve ser maior que 0');
    }
    
    if (ecSetpoint <= 0) {
        errors.push('‚Ä¢ EC Setpoint deve ser maior que 0');
    }
    
    if (totalMl <= 0) {
        errors.push('‚Ä¢ Soma ml por Litro deve ser maior que 0 (configure o plano nutricional)');
    }
    
    // Validar se h√° pelo menos um nutriente configurado
    let hasNutrients = false;
    const nutritionInputs = document.querySelectorAll('.ml-por-litro');
    nutritionInputs.forEach(input => {
        if (parseFloat(input.value) > 0) {
            hasNutrients = true;
        }
    });
    
    if (!hasNutrients) {
        errors.push('‚Ä¢ Configure pelo menos um nutriente no plano nutricional');
    }
    
    return {
        valid: errors.length === 0,
        errors: errors
    };
}

// ===== FUN√á√ÉO PARA MOSTRAR ALERTA DE VALIDA√á√ÉO =====
function showParameterValidationAlert(errors) {
    const errorMessage = `‚ö†Ô∏è N√ÉO √â POSS√çVEL ATIVAR AUTO EC\n\nCampos obrigat√≥rios n√£o preenchidos:\n\n${errors.join('\n')}\n\nüìã A√á√ÉO NECESS√ÅRIA:\n1. Preencha todos os campos obrigat√≥rios\n2. Configure o plano nutricional\n3. Clique em "Salvar Par√¢metros"\n4. Tente ativar o Auto EC novamente`;
    
    alert(errorMessage);
    
    // Log no console para debug
    console.error('‚ùå Valida√ß√£o falhou - Par√¢metros obrigat√≥rios:', errors);
    
    // Destacar campos com erro (opcional)
    highlightEmptyFields();
}

// ===== FUN√á√ÉO PARA DESTACAR CAMPOS VAZIOS =====
function highlightEmptyFields() {
    const fieldsToCheck = [
        'base-dose',
        'flow-rate', 
        'volume-reservoir',
        'ec-setpoint'
    ];
    
    fieldsToCheck.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        const value = parseFloat(field.value) || 0;
        
        if (value <= 0) {
            field.style.borderColor = '#e74c3c';
            field.style.backgroundColor = '#fdf2f2';
            
            // Remover destaque ap√≥s 3 segundos
            setTimeout(() => {
                field.style.borderColor = '';
                field.style.backgroundColor = '';
            }, 3000);
        }
    });
    
    // Verificar total-ml tamb√©m
    const totalMlField = document.getElementById('total-ml');
    const totalMlValue = parseFloat(totalMlField.value) || 0;
    if (totalMlValue <= 0) {
        totalMlField.style.borderColor = '#e74c3c';
        totalMlField.style.backgroundColor = '#fdf2f2';
        
        setTimeout(() => {
            totalMlField.style.borderColor = '';
            totalMlField.style.backgroundColor = '';
        }, 3000);
    }
}

// ===== FUN√á√ÉO PARA MOSTRAR CONFIRMA√á√ÉO DETALHADA DO AUTO EC =====
async function showAutoECConfirmation() {
    try {
        // Obter valores atuais dos campos
        const baseDose = parseFloat(document.getElementById('base-dose').value);
        const flowRate = parseFloat(document.getElementById('flow-rate').value);
        const volume = parseFloat(document.getElementById('volume-reservoir').value);
        const ecSetpoint = parseFloat(document.getElementById('ec-setpoint').value);
        const totalMl = parseFloat(document.getElementById('total-ml').value);
        const intervalo = parseFloat(document.getElementById('intervalo-auto-ec').value) || 3;
        
        // Calcular u(t) atual usando o controller
        const calculationResult = await updateEquationDisplay();
        
        // Obter EC atual (simulado ou real)
        const ecAtual = globalState.control.currentECValue || 400; // Valor de exemplo
        const erro = ecSetpoint - ecAtual;
        
        // Preparar dados dos c√°lculos
        let utVolume = 0;
        let tempoSegundos = 0;
        let ganhoFisico = 0;
        
        if (calculationResult && calculationResult.result !== undefined) {
            utVolume = calculationResult.result;
            tempoSegundos = calculationResult.utSegundos;
            
            // Calcular ganho f√≠sico previsto
            const k = totalMl > 0 ? baseDose / totalMl : 0;
            ganhoFisico = volume > 0 ? (k * utVolume) / volume : 0;
        }
        
        // Criar mensagem de confirma√ß√£o detalhada
        const confirmationMessage = `ü§ñ ATIVA√á√ÉO DO AUTO EC
        
‚úÖ PAR√ÇMETROS EC CONFIGURADOS:

üìä Base de dose: ${baseDose} ¬µS/cm
üíß Taxa de vaz√£o: ${flowRate} ml/s  
ü™£ Volume reservat√≥rio: ${volume} L
üß™ Soma ml por Litro: ${totalMl} ml/L
‚è±Ô∏è Intervalo entre doses: ${intervalo} segundos

üéØ CONTROLE AUTOM√ÅTICO:

üìà EC Atual: ${ecAtual.toFixed(0)} ¬µS/cm
üéØ EC Setpoint: ${ecSetpoint} ¬µS/cm
‚ö° Erro: ${erro.toFixed(0)} ¬µS/cm

üìä C√ÅLCULOS AUTOM√ÅTICOS:

üíß u(t) Volume a dosar: ${utVolume.toFixed(3)} ml
‚è±Ô∏è Tempo de dosagem: ${tempoSegundos.toFixed(2)} segundos
‚ö° Ganho f√≠sico previsto: ${ganhoFisico.toFixed(1)} ¬µS/cm

üîÑ PROPOR√á√ïES DIN√ÇMICAS:
${await getNutrientProportionsText()}

‚ö†Ô∏è IMPORTANTE:
‚Ä¢ O sistema dosar√° AUTOMATICAMENTE quando necess√°rio
‚Ä¢ Verifica√ß√£o a cada 30 segundos
‚Ä¢ Toler√¢ncia: ¬±50 ¬µS/cm
‚Ä¢ Voc√™ pode cancelar a qualquer momento

ü§ñ Deseja ATIVAR o controle autom√°tico?`;

        return confirm(confirmationMessage);
        
    } catch (error) {
        console.error('‚ùå Erro ao preparar confirma√ß√£o:', error);
        
        // Fallback com confirma√ß√£o simples
        const simpleConfirmation = `ü§ñ ATIVAR AUTO EC?
        
‚ö†Ô∏è Isso iniciar√° o controle autom√°tico de EC.
O sistema dosar√° nutrientes automaticamente quando necess√°rio.

Deseja continuar?`;
        
        return confirm(simpleConfirmation);
    }
}

// ===== FUN√á√ÉO AUXILIAR PARA OBTER TEXTO DAS PROPOR√á√ïES =====
async function getNutrientProportionsText() {
    try {
        const lastResult = window.lastControllerResult;
        if (lastResult && lastResult.distribution) {
            let proportionsText = '';
            lastResult.distribution.forEach(item => {
                if (item.utNutriente > 0.001) {
                    proportionsText += `  ‚Ä¢ ${item.nutriente}: ${item.utNutriente.toFixed(2)}ml (${(item.proporcao * 100).toFixed(1)}%)\n`;
                }
            });
            return proportionsText || '  ‚Ä¢ Nenhuma propor√ß√£o configurada';
        }
        return '  ‚Ä¢ Propor√ß√µes ser√£o calculadas automaticamente';
    } catch (error) {
        return '  ‚Ä¢ Erro ao obter propor√ß√µes';
    }
}

// ===== FUN√á√ÉO DE VALIDA√á√ÉO DE PAR√ÇMETROS EC =====